{
  "Comment": "A description of my state machine",
  "StartAt": "Check Bearer Token Present",
  "States": {
    "Check Bearer Token Present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": false,
          "Next": "Error: Invalid Bearer Token"
        }
      ],
      "Default": "Validate Bearer Token"
    },
    "Validate Bearer Token": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": false,
          "Next": "Error: No access code"
        }
      ],
      "Default": "Fetch Max JWT TTL"
    },
    "Fetch Max JWT TTL": {
      "Type": "Task",
      "Parameters": {
        "Name": "${MaxJwtTtlParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch JWT TTL Unit",
      "ResultPath": "$.MaxJwtTTL"
    },
    "Fetch JWT TTL Unit": {
      "Type": "Task",
      "Next": "Fetch VC Issuer",
      "Parameters": {
        "Name": "${JwtTtlUnitParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.jwtTTLUnit"
    },
    "Fetch VC Issuer": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiable-credential/issuer"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch VC KMS Signing Key",
      "ResultPath": "$.vc_issuer"
    },
    "Fetch VC KMS Signing Key": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiableCredentialKmsSigningKeyId"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch Person Identity Table Name",
      "ResultPath": "$.kmsSigningKeyId"
    },
    "Fetch Person Identity Table Name": {
      "Type": "Task",
      "Next": "Fetch Session Table Name",
      "Parameters": {
        "Name": "/${CommonStackName}/PersonIdentityTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.personIdentityTableName"
    },
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Query Session Item",
      "Parameters": {
        "Name": "/${CommonStackName}/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.sessionTable"
    },
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.sessionTable.Parameter.Value",
        "IndexName": "access-token-index",
        "KeyConditionExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "Next": "Fetch details from person identity",
      "ResultPath": "$.querySession"
    },
    "Fetch details from person identity": {
      "Type": "Task",
      "Next": "Create Issue Credential",
      "Parameters": {
        "TableName.$": "$.personIdentityTableName.Parameter.Value",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.querySession.Items[0].sessionId.S"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.userDetails"
    },
    "Create Issue Credential": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${IssueCredentialArn}",
        "Payload": {
          "userInfoEvent.$": "$.userDetails"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Insert Header",
      "ResultPath": "$.credentialSubject"
    },
    "Insert Header": {
      "Type": "Pass",
      "Next": "Sign VC claimSet",
      "Result": {
        "typ": "JWT",
        "alg": "ES256"
      },
      "ResultPath": "$.header"
    },
    "Sign VC claimSet": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "kid.$": "$.kmsSigningKeyId.Parameter.Value",
          "header.$": "States.JsonToString($.header)",
          "claimsSet.$": "States.JsonToString($.credentialSubject.Payload)"
        },
        "FunctionName": "${JwtSignerFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true,
      "OutputPath": "$.Payload"
    },
    "Error: No access code": {
      "Type": "Pass",
      "End": true
    },
    "Error: Invalid Bearer Token": {
      "Type": "Pass",
      "End": true
    }
  }
}
