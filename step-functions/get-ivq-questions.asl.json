{
  "Comment": "Populates the table of questions from the HMRC IVQ API",
  "StartAt": "Query questions table for session ID",
  "States": {
    "Query questions table for session ID": {
      "Type": "Task",
      "Next": "Check if questions already exist for session",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.loadedQuestions"
    },
    "Check if questions already exist for session": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.loadedQuestions.Count",
          "NumericEquals": 0,
          "Next": "Get Bearer Token"
        }
      ],
      "Default": "Questions already loaded - Do nothing"
    },
    "Get Bearer Token": {
      "Type": "Task",
      "Parameters": {
        "SecretId": "${BearerTokenName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "Next": "Get Questions URL and User Agent",
      "ResultSelector": {
        "value.$": "$.SecretString"
      },
      "ResultPath": "$.bearerToken"
    },
    "Get Questions URL and User Agent": {
      "Type": "Task",
      "Next": "Invoke FetchQuestions Lambda",
      "Parameters": {
        "Names": ["${QuestionsUrl}", "${UserAgent}"]
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "url.$": "$.Parameters[0].Value",
        "userAgent.$": "$.Parameters[1].Value"
      }
    },
    "Invoke FetchQuestions Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${FetchQuestionsArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Filter questions",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Err: FetchQuestions threw Exception"
        }
      ]
    },
    "Filter questions": {
      "Type": "Pass",
      "Next": "Is available questions present?",
      "Comment": "TODO: Implement question filtering"
    },
    "Err: FetchQuestions threw Exception": {
      "Type": "Fail"
    },
    "Is available questions present?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Payload.availableQuestions",
          "IsPresent": true,
          "Next": "Success"
        }
      ],
      "Default": "Err: Response Not Valid"
    },
    "Err: Response Not Valid": {
      "Type": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Questions already loaded - Do nothing": {
      "Type": "Succeed"
    }
  }
}
