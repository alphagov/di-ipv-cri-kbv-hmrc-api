{
  "Comment": "Generates the Verifiable Credential",
  "StartAt": "Check Bearer Token Present",
  "States": {
    "Check Bearer Token Present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": true,
          "Next": "Query Session Item"
        }
      ],
      "Default": "Err: Bearer Token missing"
    },
    "Err: Bearer Token missing": {
      "Type": "Fail",
      "Error": "Bearer Token missing"
    },
    "Fetch Max JWT TTL": {
      "Type": "Task",
      "Parameters": {
        "Name": "${MaxJwtTtlParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch JWT TTL Unit",
      "ResultPath": "$.parameters.maxJwtTtl",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      }
    },
    "Fetch JWT TTL Unit": {
      "Type": "Task",
      "Next": "Fetch VC Issuer",
      "Parameters": {
        "Name": "${JwtTtlUnitParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.parameters.jwtTtlUnit",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      }
    },
    "Fetch VC Issuer": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiable-credential/issuer"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch VC KMS Signing Key",
      "ResultPath": "$.parameters.verifiableCredentialssuer",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      }
    },
    "Fetch VC KMS Signing Key": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiableCredentialKmsSigningKeyId"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Create VC Body (issuecredential)",
      "ResultPath": "$.parameters.kmsSigningKeyId",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      }
    },
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName": "${SessionTableName}",
        "IndexName": "access-token-index",
        "KeyConditionExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "Next": "Was a Single SessionItem found via Bearer Token",
      "ResultPath": "$.querySessionItem"
    },
    "Was a Single SessionItem found via Bearer Token": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.querySessionItem.Items",
              "IsPresent": true
            },
            {
              "Variable": "$.querySessionItem.Count",
              "NumericEquals": 1
            }
          ],
          "Next": "Unmarshall QuerySessionItem"
        }
      ],
      "Default": "Err: Invalid Bearer Token"
    },
    "Unmarshall QuerySessionItem": {
      "Type": "Pass",
      "Next": "DynamoDB Get SessionItem",
      "Parameters": {
        "sessionId.$": "$.querySessionItem.Items[0].sessionId.S",
        "accessToken.$": "$.querySessionItem.Items[0].accessToken.S",
        "subject.$": "$.querySessionItem.Items[0].subject.S"
      },
      "ResultPath": "$.querySessionItem"
    },
    "Err: Invalid Bearer Token": {
      "Type": "Fail",
      "Error": "Invalid Bearer Token"
    },
    "DynamoDB Get SessionItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${SessionTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.querySessionItem.sessionId"
          }
        }
      },
      "Next": "Was a SessionItem found",
      "TimeoutSeconds": 5,
      "ResultPath": "$.sessionItem",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Comment": "Error getting sessionItem",
          "Next": "Err: SessionItem not found"
        }
      ]
    },
    "Was a SessionItem found": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.sessionItem.Item",
          "IsPresent": true,
          "Next": "Is there a valid sessionItem for the sessionId"
        }
      ],
      "Default": "Err: SessionItem not found"
    },
    "Is there a valid sessionItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sessionItem.Item.sessionId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.expiryDate.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.clientIpAddress.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.redirectUri.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.createdDate.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.clientId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.subject.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.persistentSessionId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.attemptCount.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.state.S",
              "IsPresent": true
            }
          ],
          "Next": "Unmarshall SessionItem (Step1)"
        }
      ],
      "Default": "Err: SessionItem not valid"
    },
    "Unmarshall SessionItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "marshalledPayload.$": "$.sessionItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall SessionItem (Step 2)",
      "ResultPath": "$.sessionItem"
    },
    "Err: SessionItem not valid": {
      "Type": "Fail",
      "Error": "SessionItem not valid"
    },
    "Unmarshall SessionItem (Step 2)": {
      "Type": "Pass",
      "Next": "DynamoDB Get PersonIdentityItem",
      "ResultPath": "$.sessionItem",
      "InputPath": "$.sessionItem.Payload"
    },
    "Err: SessionItem not found": {
      "Type": "Fail",
      "Error": "SessionItem not found"
    },
    "DynamoDB Get PersonIdentityItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${PersonIdentityTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionItem.sessionId"
          }
        }
      },
      "Next": "Is there a PersonIdentityItem for the sessionId",
      "TimeoutSeconds": 5,
      "ResultPath": "$.personIdentityItem"
    },
    "Is there a PersonIdentityItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.Item",
          "IsPresent": true,
          "Next": "Unmarshall PersonIdentityItem (Step1)"
        }
      ],
      "Default": "Err: PersonIdentityItem not found"
    },
    "Unmarshall PersonIdentityItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "marshalledPayload.$": "$.personIdentityItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall PersonIdentityItem (Step2)",
      "ResultPath": "$.personIdentityItem"
    },
    "Unmarshall PersonIdentityItem (Step2)": {
      "Type": "Pass",
      "InputPath": "$.personIdentityItem.Payload",
      "ResultPath": "$.personIdentityItem",
      "Next": "Fetch Max JWT TTL"
    },
    "Err: PersonIdentityItem not found": {
      "Type": "Fail",
      "Error": "PersonIdentityItem not found"
    },
    "Create VC Body (issuecredential)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${IssueCredentialArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Is vcBody Present",
      "ResultPath": "$.credentialSubject"
    },
    "Is vcBody Present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.credentialSubject.Payload.vcBody",
          "IsPresent": true,
          "Next": "Insert VC Header"
        }
      ],
      "Default": "Err: Issuecredential Lambda responded unexpectedly"
    },
    "Err: Issuecredential Lambda responded unexpectedly": {
      "Type": "Fail",
      "Error": "Issuecredential Lambda responded unexpectedly"
    },
    "Insert VC Header": {
      "Type": "Pass",
      "Next": "Sign VC claimSet (JwtSignerFunction)",
      "Result": {
        "typ": "JWT",
        "alg": "ES256"
      },
      "ResultPath": "$.header"
    },
    "Sign VC claimSet (JwtSignerFunction)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "kid.$": "$.parameters.kmsSigningKeyId.value",
          "header.$": "States.JsonToString($.header)",
          "claimsSet.$": "States.JsonToString($.credentialSubject.Payload.vcBody)"
        },
        "FunctionName": "${JwtSignerFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Is JWT Present"
    },
    "Is JWT Present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Payload.jwt",
          "IsPresent": true,
          "Next": "Success"
        }
      ],
      "Default": "Err: JwtSignerFunction Lambda responded unexpectedly"
    },
    "Err: JwtSignerFunction Lambda responded unexpectedly": {
      "Type": "Fail",
      "Error": "JwtSignerFunction Lambda responded unexpectedly"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
