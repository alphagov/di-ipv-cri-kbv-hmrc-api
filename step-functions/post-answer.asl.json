{
  "Comment": "A description of my state machine",
  "StartAt": "GET NINO",
  "States": {
    "GET NINO": {
      "Type": "Task",
      "Next": "Check NINO field is present",
      "Parameters": {
        "TableName": "${PersonalIdentityTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.nino"
    },
    "Check NINO field is present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.nino.Count",
            "NumericGreaterThan": 0
          },
          "Next": "Err: NINO missing"
        }
      ],
      "Default": "Parse input"
    },
    "Err: NINO missing": {
      "Type": "Fail",
      "Cause": "No NINO found for session-id"
    },
    "Parse input": {
      "Type": "Pass",
      "Next": "Query database for the current question",
      "Parameters": {
        "sessionId.$": "$.sessionId",
        "nino.$": "$.nino.Items[0].nino.S",
        "answer.$": "$.value",
        "questionKey.$": "$.key"
      }
    },
    "Query database for the current question": {
      "Type": "Task",
      "Next": "Check the provided question is not answered",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value AND questionKey = :questionKeyValue",
        "FilterExpression": "answered = :answeredValue",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          },
          ":answeredValue": {
            "S": "false"
          },
          ":questionKeyValue": {
            "S.$": "$.questionKey"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.question"
    },
    "Check the provided question is not answered": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.question.Count",
            "NumericGreaterThan": 0
          },
          "Next": "Err: The question has already been answered"
        }
      ],
      "Default": "Update database to store the answer"
    },
    "Update database to store the answer": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          },
          "questionKey": {
            "S.$": "$.questionKey"
          }
        },
        "UpdateExpression": "SET answer = :answer, answered = :answered",
        "ExpressionAttributeValues": {
          ":answer": {
            "S.$": "$.answer"
          },
          ":answered": {
            "S": "true"
          }
        }
      },
      "Next": "Query database for all unanswered questions",
      "ResultPath": null
    },
    "Query database for all unanswered questions": {
      "Type": "Task",
      "Next": "Check to see if there are any more unanswered questions",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "FilterExpression": "answered = :answeredValue",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          },
          ":answeredValue": {
            "S": "false"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.questions"
    },
    "Check to see if there are any more unanswered questions": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.questions.Count",
          "NumericGreaterThan": 0,
          "Next": "Response Filter"
        }
      ],
      "Default": "Post answers to HMRC"
    },
    "Post answers to HMRC": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "stateMachineArn": "${AnswersIvqStateMachine}",
          "input": {
            "sessionId.$": "$.sessionId",
            "nino.$": "$.nino"
          }
        },
        "FunctionName": "${ExecuteStateMachineFunctionName}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Fetch Auth Code Expiry",
      "ResultPath": null,
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Err: Post IVQ Answers threw Exception"
        }
      ]
    },
    "Err: Post IVQ Answers threw Exception": {
      "Type": "Fail"
    },
    "Fetch Auth Code Expiry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CreateAuthCodeFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Fetch Session Table Name",
      "ResultPath": "$.expiry"
    },
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Set Auth Code for Session",
      "Parameters": {
        "Name": "/${CommonStackName}/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.sessionTable"
    },
    "Set Auth Code for Session": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.sessionTable.Parameter.Value",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCode = :authCode, authorizationCodeExpiryDate = :expiry",
        "ExpressionAttributeValues": {
          ":authCode": {
            "S.$": "States.UUID()"
          },
          ":expiry": {
            "N.$": "States.Format('{}',$.expiry.Payload.authCodeExpiry)"
          }
        }
      },
      "Next": "Response Filter"
    },
    "Response Filter": {
      "Type": "Pass",
      "Next": "Success",
      "Result": {}
    },
    "Err: The question has already been answered": {
      "Type": "Pass",
      "End": true,
      "Result": {
        "error": "Question has already been answered"
      }
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
