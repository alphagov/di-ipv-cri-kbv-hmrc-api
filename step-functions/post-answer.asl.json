{
  "Comment": "A description of my state machine",
  "StartAt": "Check answer is present",
  "States": {
    "Check answer is present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.answer",
            "IsPresent": true
          },
          "Next": "Error: No answer is present"
        }
      ],
      "Default": "Check NINO is present"
    },
    "Error: No answer is present": {
      "Type": "Pass",
      "End": true
    },
    "Check NINO is present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.nino",
            "IsPresent": true
          },
          "Next": "Error: No NINO is present"
        }
      ],
      "Default": "Check session ID is present"
    },
    "Error: No NINO is present": {
      "Type": "Pass",
      "End": true
    },
    "Check session ID is present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionId",
            "IsPresent": true
          },
          "Next": "Error: No session ID is present"
        }
      ],
      "Default": "Check question key is present"
    },
    "Check question key is present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.questionKey",
            "IsPresent": true
          },
          "Next": "Error: No question key is present"
        }
      ],
      "Default": "Query database for the current question"
    },
    "Error: No question key is present": {
      "Type": "Pass",
      "End": true
    },
    "Error: No session ID is present": {
      "Type": "Pass",
      "End": true
    },
    "Query database for the current question": {
      "Type": "Task",
      "Next": "Check the provided question is not answered",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value AND questionKey = :questionKeyValue",
        "FilterExpression": "answered = :answeredValue",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          },
          ":answeredValue": {
            "S": "false"
          },
          ":questionKeyValue": {
            "S.$": "$.questionKey"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.question"
    },
    "Check the provided question is not answered": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.question.Count",
            "NumericGreaterThan": 0
          },
          "Next": "Error: The question has already been answered"
        }
      ],
      "Default": "Update database to store the answer"
    },
    "Update database to store the answer": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          },
          "questionKey": {
            "S.$": "$.questionKey"
          }
        },
        "UpdateExpression": "SET answer = :answer, answered = :answered",
        "ExpressionAttributeValues": {
          ":answer": {
            "S.$": "$.answer"
          },
          ":answered": {
            "S": "true"
          }
        }
      },
      "Next": "Query database for all unanswered questions",
      "ResultPath": null
    },
    "Query database for all unanswered questions": {
      "Type": "Task",
      "Next": "Check to see if there are any more unanswered questions",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "FilterExpression": "answered = :answeredValue",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          },
          ":answeredValue": {
            "S": "false"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.questions"
    },
    "Check to see if there are any more unanswered questions": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.questions.Count",
          "NumericGreaterThan": 0,
          "Next": "HTTP 200 - question has been answered successfully"
        }
      ],
      "Default": "Submit answers to HMRC"
    },
    "Submit answers to HMRC": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution",
      "Parameters": {
        "StateMachineArn": "arn:aws:states:eu-west-2:404250751813:execution:kbv-hmrc-PostAnswers",
        "Input": {
          "sessionId.$": "$.sessionId",
          "nino.$": "$.nino"
        }
      },
      "Next": "HTTP 200 - question has been answered successfully"
    },
    "Error: The question has already been answered": {
      "Type": "Pass",
      "End": true
    },
    "HTTP 200 - question has been answered successfully": {
      "Type": "Pass",
      "End": true
    }
  }
}
