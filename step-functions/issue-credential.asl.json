{
  "Comment": "A description of my state machine",
  "StartAt": "Check Bearer Token Present",
  "States": {
    "Check Bearer Token Present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": false,
          "Next": "Error: Invalid Bearer Token"
        }
      ],
      "Default": "Validate Bearer Token"
    },
    "Validate Bearer Token": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": false,
          "Next": "Error: No access code"
        }
      ],
      "Default": "Fetch Max JWT TTL"
    },
    "Fetch Max JWT TTL": {
      "Type": "Task",
      "Parameters": {
        "Name": "${MaxJwtTtlParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch JWT TTL Unit",
      "ResultPath": "$.MaxJwtTTL"
    },
    "Fetch JWT TTL Unit": {
      "Type": "Task",
      "Next": "Fetch VC Issuer",
      "Parameters": {
        "Name": "${JwtTtlUnitParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.jwtTTLUnit"
    },
    "Fetch VC Issuer": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiable-credential/issuer"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch VC KMS Signing Key",
      "ResultPath": "$.vc_issuer"
    },
    "Fetch VC KMS Signing Key": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiableCredentialKmsSigningKeyId"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch Person Identity Table Name",
      "ResultPath": "$.kmsSigningKeyId"
    },
    "Fetch Person Identity Table Name": {
      "Type": "Task",
      "Next": "Fetch Session Table Name",
      "Parameters": {
        "Name": "/${CommonStackName}/PersonIdentityTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.personIdentityTableName"
    },
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Query Session Item",
      "Parameters": {
        "Name": "/${CommonStackName}/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.sessionTable"
    },
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.sessionTable.Parameter.Value",
        "IndexName": "access-token-index",
        "KeyConditionExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "Next": "Fetch details from person identity",
      "ResultPath": "$.querySession"
    },
    "Fetch details from person identity": {
      "Type": "Task",
      "Next": "Create Credential Subject",
      "Parameters": {
        "TableName.$": "$.personIdentityTableName.Parameter.Value",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.querySession.Items[0].sessionId.S"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.userDetails"
    },
    "Create Credential Subject": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CredentialSubjectFunctionArn}",
        "Payload": {
          "userInfoEvent.$": "$.userDetails"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Create VC Structure",
      "ResultPath": "$.credentialSubject"
    },
    "Create VC Structure": {
      "Type": "Pass",
      "Next": "Add Type to VC",
      "Parameters": {
        "credentialSubject.$": "$.credentialSubject.Payload",
        "kid.$": "$.kmsSigningKeyId.Parameter.Value",
        "sessionId.$": "$.querySession.Items[0].sessionId.S",
        "subject.$": "$.querySession.Items[0].subject.S",
        "MaxJwtTTL.$": "$.MaxJwtTTL.Parameter.Value",
        "JwtTtlUnit.$": "$.jwtTTLUnit.Parameter.Value"
      }
    },
    "Add Type to VC": {
      "Type": "Pass",
      "Next": "Fetch Correct KBV Answers",
      "Parameters": {
        "type": ["VerifiableCredential", "IdentityCheckCredential"],
        "@context": [
          "https://www.w3.org/2018/credentials/v1",
          "https://vocab.london.cloudapps.digital/contexts/identity-v1.jsonld"
        ]
      },
      "ResultPath": "$.vc_type"
    },
    "Fetch Correct KBV Answers": {
      "Type": "Task",
      "Next": "Create CheckDetails",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "FilterExpression": "score = :score",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          },
          ":score": {
            "S": "correct"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.correct"
    },
    "Create CheckDetails": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "questionResponseEvent.$": "$.correct"
        },
        "FunctionName": "${EvidenceCheckDetailsFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Fetch Incorrect KBV Answers",
      "ResultPath": "$.checkDetails"
    },
    "Fetch Incorrect KBV Answers": {
      "Type": "Task",
      "Next": "Have any incorrect questions?",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "FilterExpression": "score = :score",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          },
          ":score": {
            "S": "incorrect"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.incorrect"
    },
    "Have any incorrect questions?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.incorrect.Count",
          "NumericGreaterThan": 0,
          "Next": "Create failed CheckDetails"
        }
      ],
      "Default": "Create VC Evidence"
    },
    "Create failed CheckDetails": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "questionResponseEvent.$": "$.incorrect"
        },
        "FunctionName": "${EvidenceCheckDetailsFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Create VC Evidence with failedCheckDetails",
      "ResultPath": "$.failedCheckDetails"
    },
    "Create VC Evidence": {
      "Type": "Pass",
      "Next": "Create JWT Header",
      "ResultPath": "$.vc_evidence",
      "Parameters": {
        "evidence": [
          {
            "type": "IdentityCheck",
            "txn.$": "States.UUID()",
            "verificationScore": 0,
            "checkDetails.$": "$.checkDetails.Payload"
          }
        ]
      }
    },
    "Create VC Evidence with failedCheckDetails": {
      "Type": "Pass",
      "Next": "Create JWT Header",
      "Parameters": {
        "evidence": [
          {
            "type": "IdentityCheck",
            "txn.$": "States.UUID()",
            "verificationScore": 0,
            "checkDetails.$": "$.checkDetails.Payload",
            "failedCheckDetails.$": "$.failedCheckDetails.Payload"
          }
        ]
      },
      "ResultPath": "$.vc_evidence",
      "Comment": "TODO: Check what the value of txn and verificationScore should be"
    },
    "Create JWT Header": {
      "Type": "Pass",
      "Next": "Fetch Issuer Value",
      "Parameters": {
        "kid.$": "$.kid",
        "typ": "JWT",
        "alg": "ES256"
      },
      "ResultPath": "$.header"
    },
    "Fetch Issuer Value": {
      "Type": "Task",
      "Next": "Fetch exp time and NBF",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiable-credential/issuer"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.issuer"
    },
    "Fetch exp time and NBF": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${TimeFunctionArn}",
        "Payload": {
          "ttl.$": "$.MaxJwtTTL",
          "ttlUnit.$": "$.JwtTtlUnit"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Create VC Claim Set",
      "ResultPath": "$.time"
    },
    "Create VC Claim Set": {
      "Type": "Pass",
      "Next": "Base64 and Combine JWT Header and Payload",
      "Parameters": {
        "header.$": "$.header",
        "payload": {
          "jti.$": "States.Format('urn:uuid:{}',States.UUID())",
          "sub.$": "$.subject",
          "iss.$": "$.issuer.Parameter.Value",
          "nbf.$": "$.time.Payload.nbf",
          "exp.$": "$.time.Payload.expiry",
          "vc": {
            "type.$": "$.vc_type.type",
            "@context.$": "$.vc_type.@context",
            "credentialSubject.$": "$.credentialSubject",
            "evidence.$": "$.vc_evidence.evidence"
          }
        }
      }
    },
    "Base64 and Combine JWT Header and Payload": {
      "Type": "Pass",
      "Next": "Sign VC claimset",
      "Parameters": {
        "header.$": "States.Base64Encode(States.JsonToString($.header))",
        "payload.$": "States.Base64Encode(States.JsonToString($.payload))",
        "kid.$": "$.header.kid"
      }
    },
    "Sign VC claimset": {
      "Type": "Task",
      "Next": "Create Signed JWT",
      "Parameters": {
        "KeyId.$": "$.kid",
        "Message.$": "States.Format('{}.{}', $.header,$.payload)",
        "SigningAlgorithm": "ECDSA_SHA_256"
      },
      "Resource": "arn:aws:states:::aws-sdk:kms:sign",
      "ResultPath": "$.sign"
    },
    "Create Signed JWT": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "jwt.$": "States.Format('{}.{}.{}', $.header, $.payload, States.Base64Encode($.sign.Signature))"
      }
    },
    "Error: No access code": {
      "Type": "Pass",
      "End": true
    },
    "Error: Invalid Bearer Token": {
      "Type": "Pass",
      "End": true
    }
  }
}
