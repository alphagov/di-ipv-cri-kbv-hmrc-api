openapi: "3.0.1"
info:
  title: "HMRC KBV Credential Issuer Private Api Specification"
  version: "2.0"

paths:
  /session:
    post:
      summary: "IP address of the client."
      parameters:
        - in: header
          name: "X-Forwarded-For"
          schema:
            type: string
            format: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
            examples:
              201:
                description: "Example body to receive a HTTP 201 response"
                value:
                  session_id: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
                  state: "string"
                  redirect_uri: "string"
              400:
                description: "Example body to receive a HTTP 400 response"
                value:
                  session_id: "fad21bea-bce9-4aa7-8889-d50c7d26616e"
              500:
                description: "Example body to receive a HTTP 500 response"
                value:
                  session_id: "f27b8afc-90ef-4e0f-83ad-00a2f5692590"
        required: true
      responses:
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
              examples:
                201:
                  summary: "An example of a successful response message"
                  value:
                    session_id: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
                    state: "string"
                    redirect_uri: "string"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommonStackName}-SessionFunctionTS/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /fetchquestions:
    post:
      description: >
        Endpoint provided by the private api gateway, triggers the retrival of questions for the NINO supplied previously in the shared claims of the JWT.
        Returns 200 if the matching NINO has sufficient questions,
        else returns 400 with an oauth error containing invalid_request if there are not sufficient questions.
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        content:
          application/json: {}
        required: false
      x-amazon-apigateway-request-validator: "Validate both"
      responses:
        "200":
          description: There are sufficient questions
          content:
            application/json: {}
        "204":
          description: Request already retrieved, but continue the user has sufficient questions (User back button recovery path)
          content:
            application/json: {}
        "400":
          description: Insufficient questions for this NINO or NINO not present in request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                  error: "invalid_request"
                  error_description: "Invalid request"
        "403":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                  error: "access_denied"
                  error_description: "Access denied"
        "500":
          description: Server error - Statemachine failure, a lambda failure or unhandled statemachine output
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        passthroughBehavior: "when_no_templates"
        type: "aws"
        credentials:
          Fn::Sub: ${ExecuteStateMachineRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartSyncExecution
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                "input": "{\"sessionId\": \"$input.params('session-id').trim()\"}",
                "stateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-FetchQuestionsStateMachine"
              }
        responses:
          default:
            statusCode: 500
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #set($status = $inputRoot.status)
                #if($status == "SUCCEEDED")
                  #set($output = $util.parseJson($input.path('$.output')))
                  #set($payload = $output.Payload)
                  #set($fetchQuestionsState = $payload.fetchQuestionsState)
                  #if($fetchQuestionsState == "SufficientQuestions")
                    #set($context.responseOverride.status = 200)
                  #elseif($fetchQuestionsState == "ContinueSufficientQuestionAlreadyRetrieved")
                    #set($context.responseOverride.status = 204)
                  #elseif($fetchQuestionsState == "InsufficientQuestions")
                    #set($context.responseOverride.status = 400)
                    {
                      "oauth_error": {
                        "error": "invalid_request",
                        "error_description": "Invalid request"
                      }
                    }
                  #else
                    #set($context.responseOverride.status = 500)
                    {
                      "oauth_error": {
                        "error": "server_error",
                        "error_description": "Unexpected server error"
                        }
                    }
                  #end
                #else
                  #set($errMsg = $inputRoot.get("error"))
                  #if( ($errMsg == "SessionId missing") ||
                  ($errMsg == "SessionItem not found") ||
                  ($errMsg == "SessionItem not valid") )
                    #set($context.responseOverride.status = 403)
                    {
                      "oauth_error": {
                        "error": "access_denied",
                        "error_description": "Access denied"
                        }
                    }
                  #elseif(($errMsg == "PersonIdentityItem not found") ||
                  ($errMsg == "NINO was not present in shared claims"))
                    #set($context.responseOverride.status = 400)
                    {
                      "oauth_error": {
                        "error": "invalid_request",
                        "error_description": "Invalid request"
                      }
                    }
                  #elseif($errMsg == "OTG Token Lambda responded unexpectedly" ||
                   $errMsg == "FetchQuestions Lambda responded unexpectedly")
                    #set($context.responseOverride.status = 500)
                    {
                      "oauth_error": {
                        "error": "server_error",
                        "error_description": "Unexpected server error"
                        }
                    }
                  #else
                    #set($context.responseOverride.status = 500)
                    {
                      "oauth_error": {
                        "error": "server_error",
                        "error_description": "Unexpected server error"
                        }
                    }
                  #end
                #end

  /question:
    get:
      description: >
        Retrieves the next question for the NINO matching this session
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      x-amazon-apigateway-request-validator: "Validate both"
      responses:
        "200":
          description: Single question response (Formats TBC)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
              examples:
                P60CurrentYear:
                  value:
                    questionKey: "rti-p60-payment-for-year"
                    info:
                      currentTaxYear: "2021/2022"
                P60CurrentYearOrPrevious:
                  value:
                    questionKey: "rti-p60-payment-for-year"
                    info:
                      currentTaxYear: "2021/2022"
                      previousTaxYear: "2020/2021"
                TaxCreditAmount:
                  value:
                    questionKey: "tc-amount"
        "204":
          description: No more questions for this NINO
        "403":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                  error: "access_denied"
                  error_description: "Access denied"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        passthroughBehavior: "when_no_templates"
        type: "aws"
        credentials:
          Fn::Sub: ${ExecuteStateMachineRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartSyncExecution
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                "input": "{\"sessionId\": \"$input.params('session-id').trim()\"}",
                "stateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-GetQuestion"
              }
        responses:
          default:
            statusCode: 500
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #set($status = $inputRoot.status)
                #if($status == "SUCCEEDED")
                    #set($output = $util.parseJson($input.path('$.output')))
                    #set($getQuestionState = $output.getQuestionState)
                    #set($info = $output.info)
                    #if($getQuestionState == "Question")
                        #set($context.responseOverride.status = 200)
                        {
                          "questionKey": "$output.questionKey",
                          #if($info != "")
                            "info": {
                              #if($info.currentTaxYear != "")
                              "currentTaxYear" : "$info.currentTaxYear",
                              #end
                              #if($info.previousTaxYear != "")
                                "previousTaxYear" : "$info.previousTaxYear"
                              #end
                            }
                          #end
                        }
                    #elseif($getQuestionState == "NoMoreQuestions")
                        #set($context.responseOverride.status = 204)
                    #else
                        #set($context.responseOverride.status = 500)
                        {
                          "oauth_error": {
                            "error": "server_error",
                            "error_description": "Unexpected server error"
                            }
                        }
                    #end
                #else
                  #set($errMsg = $inputRoot.get("error"))
                  #if( ($errMsg == "SessionId missing") ||
                  ($errMsg == "SessionItem not found") )
                    #set($context.responseOverride.status = 403)
                    {
                      "oauth_error": {
                        "error": "access_denied",
                        "error_description": "Access denied"
                        }
                    }
                  #elseif(($errMsg == "PersonIdentityItem not found") ||
                  ($errMsg == "NINO was not present in shared claims"))
                    #set($context.responseOverride.status = 400)
                    {
                      "oauth_error": {
                        "error": "invalid_request",
                        "error_description": "Invalid request"
                      }
                    }
                  #else
                    #set($context.responseOverride.status = 500)
                    {
                      "oauth_error": {
                        "error": "server_error",
                        "error_description": "Unexpected server error"
                        }
                    }
                  #end
                #end

  /answer:
    post:
      description: >
        Saves the answer to questions, where the key provided must match the question keys for the NINO matching this session.
        On the final question being saved, all the saved answers will be auto submitted to the 3rd party api answers endpoint.
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        description: Questions with single value answer (Other formats or example TBC)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerPost"
        required: true
      responses:
        "200":
          description: >
            All expected answers have been recieved and forwarded to the the thirdparty.
            The response has been processed and VC evidence is now saved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
              example:
                response: "VC evidence is saved"
        "202":
          description: Submitted answer saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
              example:
                response: "Submitted answer saved"
        "204":
          description: This question already answered, but continue (User back button recovery path)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
              example:
                response: "Continue"
        "400":
          description: Client Submission Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                  error: "invalid_request"
                  error_description: "Invalid request"
        "409":
          description: Error with answer key summitted - e.g unknown question key / question key answered out of sequence - (unrecoverable)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                  error: "invalid_request"
                  error_description: "Invalid request"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                  error: "server_error"
                  error_description: "Unexpected server error"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        passthroughBehavior: "when_no_templates"
        type: "aws"
        credentials:
          Fn::Sub: ${ExecuteStateMachineRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartSyncExecution
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                "input": "{\"sessionId\": \"$input.params('session-id').trim()\", \"key\": \"$input.path('$.questionKey').trim()\", \"value\": $util.escapeJavaScript($input.json('$.value'))}",
                "stateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-PostAnswer"
              }
        responses:
          default:
            statusCode: 500
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #set($status = $inputRoot.status)
                #if($status == "SUCCEEDED")
                    #set($output = $util.parseJson($input.path('$.output')))
                    #set($questionState = $output.questionState)
                    #if($questionState == "Saved")
                        #set($context.responseOverride.status = 202)
                        { "message": "Submitted answer saved"}
                    #elseif($questionState == "Done")
                        #set($context.responseOverride.status = 204)
                    #else
                        #set($context.responseOverride.status = 500)
                        {
                          "oauth_error": {
                            "error": "server_error",
                            "error_description": "Unexpected server error"
                            }
                        }
                    #end
                #else
                  #set($errMsg = $inputRoot.get("error"))
                  #if( ($errMsg == "SessionId missing") ||
                  ($errMsg == "SessionItem not found") ||
                  ($errMsg == "SessionItem not valid") )
                    #set($context.responseOverride.status = 403)
                    {
                      "oauth_error": {
                        "error": "access_denied",
                        "error_description": "Access denied"
                        }
                    }
                  #elseif(($errMsg == "Answers failed validation") ||
                    ($errMsg == "OTG Token Lambda responded unexpectedly") ||
                    ($errMsg == "Submit Answers Lambda responded unexpectedly") ||
                    ($errMsg == "CreateAuthCodeFunction responded unexpectedly") )
                    #set($context.responseOverride.status = 500)
                    {
                      "oauth_error": {
                        "error": "server_error",
                        "error_description": "Unexpected server error"
                        }
                    }
                  #else
                    #set($context.responseOverride.status = 500)
                    {
                      "oauth_error": {
                        "error": "server_error",
                        "error_description": "Unexpected server error"
                        }
                    }
                  #end
                #end

  /authorization:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommonStackName}-AuthorizationFunctionTS/invocations
        passthroughBehavior: "when_no_match"

components:
  parameters:
    SessionHeader:
      name: "session-id"
      in: header
      description: A UUID generated by the Session API to act as a primary key for the Session in DynamoDB
      required: true
      schema:
        type: "string"
      examples:
        200:
          value: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
        400:
          value: "fad21bea-bce9-4aa7-8889-d50c7d26616e"
        500:
          value: "f27b8afc-90ef-4e0f-83ad-00a2f5692590"

  schemas:
    Authorization:
      required:
        - "client_id"
        - "request"
      type: "object"
      properties:
        client_id:
          description: client identifier
          type: "string"
          minLength: 1
          example: "ipv-core-stub"
        request:
          description: Encrypted JWT Session Object
          type: "string"
          example: "eyAiBiCKD1EiFCGlHmIiJiKBLjM2N0ONPiQaR...."
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"

    Error:
      title: "Error Schema"
      type: "object"
      properties:
        message:
          type: "string"

    CommmonExpressOauthAxiosError:
      title: Common Express Oauth Error Schema
      description: Error format expected by CommonExpress Error Handler
      type: "object"
      properties:
        oauth_error:
          type: "object"
          properties:
            error:
              type: "string"
              example: "server_error"
            error_description:
              type: "string"
              example: "Unexpected server error"

    Session:
      required:
        - "session_id"
        - "state"
        - "redirect_uri"
      type: "object"
      properties:
        session_id:
          type: "string"
        state:
          type: "string"
        redirect_uri:
          type: "string"

    QuestionResponse:
      type: "object"
      properties:
        questionKey:
          description: The unique identifier for the question
          type: "string"
          example: "rti-p60-payment-for-year"
        info:
          description: Not present for all question keys
          type: "object"
          nullable: true
          properties:
            currentTaxYear:
              type: "string"
              example: "2021/2022"
            previousTaxYear:
              description: May not be present - dependant on tax year rules
              type: "string"
              nullable: true
              example: "2020/2021"

    AnswerPost:
      required:
        - "questionKey"
        - "value"
      type: "object"
      properties:
        questionKey:
          description: The unique identifier for the question
          type: "string"
          example: "rti-p60-payment-for-year"
        value:
          description: Answer provided by the user
          type: "string"
          example: "400.94"

    AnswerResponse:
      type: "object"
      properties:
        response:
          description: Human readable indication of the current state
          type: "string"
          example: "Answer Saved"

x-amazon-apigateway-request-validators:
  Validate both:
    validateRequestBody: true
    validateRequestParameters: true
  Validate Param only:
    validateRequestParameters: true
    validateRequestBody: false
