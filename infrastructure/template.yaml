AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Digital Identity IPV CRI KBV HMRC API"

Parameters:
  BearerTokenName:
    Type: String
    Default: "none"

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Timeout: 3

Resources:
  SubmitAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/submit-answer
      Handler: submit-answer-handler.lambdaHandler
      FunctionUrlConfig:
        AuthType: AWS_IAM
        Cors:
          AllowOrigins: ["*"]
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/submit-answer-handler.ts

  FetchQuestionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/fetch-questions
      Handler: fetch-questions-handler.lambdaHandler
      FunctionUrlConfig:
        AuthType: AWS_IAM
        Cors:
          AllowOrigins: ["*"]
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/fetch-questions-handler.ts

  UserAgent:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/UserAgent"
      Value: govuk-one-login
      Type: String
      Description: User agent for HMRC requests

  QuestionsUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/QuestionsUrl"
      Value: https://test-api.service.hmrc.gov.uk/individuals/verification/identity-verification-questions/questions
      Type: String
      Description: URL for HMRC /questions endpoint

  AnswersUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/AnswersUrl"
      Value: https://test-api.service.hmrc.gov.uk/individuals/verification/identity-verification-questions/answers
      Type: String
      Description: URL for HMRC /answers endpoint

  QuestionsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-questions"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "questionKey"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
        - AttributeName: "questionKey"
          KeyType: "RANGE"

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to allow step function to perform actions
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess

  GetIvqQuestionsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../step-functions/get-ivq-questions.asl.json
      DefinitionSubstitutions:
        QuestionsTableName: !Ref QuestionsTable
        QuestionsUrl: !Ref QuestionsUrl
        UserAgent: !Ref UserAgent
        FetchQuestionsArn: !GetAtt FetchQuestionsFunction.Arn
        BearerTokenName: !Ref BearerTokenName
      Name: !Sub "${AWS::StackName}-GetIvqQuestions"
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BearerTokenName}-??????
        - LambdaInvokePolicy:
            FunctionName: !Ref FetchQuestionsFunction
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/QuestionsUrl"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/UserAgent"

  GetQuestionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../step-functions/get-question.asl.json
      Role: !GetAtt StateMachineRole.Arn
      Name: !Sub "${AWS::StackName}-GetQuestion"

  PostAnswerStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../step-functions/post-answer.asl.json
      Role: !GetAtt StateMachineRole.Arn
      Name: !Sub "${AWS::StackName}-PostAnswer"

  PostAnswersStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../step-functions/post-answers.asl.json
      Role: !GetAtt StateMachineRole.Arn
      Name: !Sub "${AWS::StackName}-PostAnswers"

Outputs:
  SubmitAnswerFunctionURLEndpoint:
    Description: FURLFunction function name
    Value: !GetAtt SubmitAnswerFunctionUrl.FunctionUrl
  SubmitAnswerFunction:
    Description: "SubmitAnswer Lambda Function ARN"
    Value: !GetAtt SubmitAnswerFunction.Arn
  SubmitAnswerFunctionIamRole:
    Description: "Implicit IAM Role created for SubmitAnswer function"
    Value: !GetAtt SubmitAnswerFunctionRole.Arn

  FetchQuestionsFunctionURLEndpoint:
    Description: FURLFunction function name
    Value: !GetAtt FetchQuestionsFunctionUrl.FunctionUrl
  FetchQuestionsFunction:
    Description: "FetchQuestions Lambda Function ARN"
    Value: !GetAtt FetchQuestionsFunction.Arn
  FetchQuestionsFunctionIamRole:
    Description: "Implicit IAM Role created for FetchQuestions function"
    Value: !GetAtt FetchQuestionsFunctionRole.Arn
