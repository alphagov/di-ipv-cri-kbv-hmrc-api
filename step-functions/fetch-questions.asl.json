{
  "Comment": "Populates the table of questions from the HMRC IVQ API",
  "StartAt": "Check Session-Id is Present",
  "States": {
    "Check Session-Id is Present": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sessionId",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionId",
              "IsString": true
            }
          ],
          "Next": "DynamoDB Get SessionItem"
        }
      ],
      "Default": "Err: SessionId missing"
    },
    "DynamoDB Get SessionItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${SessionTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Was a SessionItem found",
      "TimeoutSeconds": 5,
      "ResultPath": "$.sessionItem",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Comment": "Error getting sessionItem",
          "Next": "Err: SessionItem not found"
        }
      ]
    },
    "Was a SessionItem found": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.sessionItem.Item",
          "IsPresent": true,
          "Next": "Is there a valid sessionItem for the sessionId"
        }
      ],
      "Default": "Err: SessionItem not found"
    },
    "Is there a valid sessionItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sessionItem.Item.sessionId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.expiryDate.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.clientIpAddress.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.redirectUri.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.createdDate.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.clientId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.subject.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.persistentSessionId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.attemptCount.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.state.S",
              "IsPresent": true
            }
          ],
          "Next": "Unmarshall SessionItem (Step1)"
        }
      ],
      "Default": "Err: SessionItem not valid"
    },
    "Err: SessionItem not valid": {
      "Type": "Fail",
      "Error": "SessionItem not valid"
    },
    "Unmarshall SessionItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "marshalledPayload.$": "$.sessionItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall SessionItem (Step 2)",
      "ResultPath": "$.sessionItem"
    },
    "Unmarshall SessionItem (Step 2)": {
      "Type": "Pass",
      "Next": "DynamoDB Get PersonIdentityItem",
      "ResultPath": "$.sessionItem",
      "InputPath": "$.sessionItem.Payload"
    },
    "Err: SessionItem not found": {
      "Type": "Fail",
      "Error": "SessionItem not found"
    },
    "DynamoDB Get PersonIdentityItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${PersonIdentityTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Is there a PersonIdentityItem for the sessionId",
      "TimeoutSeconds": 5,
      "ResultPath": "$.personIdentityItem"
    },
    "Is there a PersonIdentityItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.Item",
          "IsPresent": true,
          "Next": "Unmarshall PersonIdentityItem (Step1)"
        }
      ],
      "Default": "Err: PersonIdentityItem not found"
    },
    "Does PersonIdentityItem have a socialSecurityRecord with personalNumber present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.socialSecurityRecord[0].personalNumber",
          "IsPresent": true,
          "Next": "GetParameter OtgApiUrl"
        }
      ],
      "Default": "Err: NINO was not present in shared claims"
    },
    "Err: PersonIdentityItem not found": {
      "Type": "Fail",
      "Error": "PersonIdentityItem not found"
    },
    "Unmarshall PersonIdentityItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "marshalledPayload.$": "$.personIdentityItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall PersonIdentityItem (Step2)",
      "ResultPath": "$.personIdentityItem"
    },
    "Unmarshall PersonIdentityItem (Step2)": {
      "Type": "Pass",
      "InputPath": "$.personIdentityItem.Payload",
      "ResultPath": "$.personIdentityItem",
      "Next": "Does PersonIdentityItem have a socialSecurityRecord with personalNumber present"
    },
    "Err: NINO was not present in shared claims": {
      "Type": "Fail",
      "Error": "NINO was not present in shared claims"
    },
    "Err: SessionId missing": {
      "Type": "Fail",
      "Error": "SessionId missing or not found"
    },
    "GetParameter OtgApiUrl": {
      "Type": "Task",
      "Parameters": {
        "Name": "${OtgApiUrl}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Invoke OTG Token Lambda",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.parameters.otgApiUrl"
    },
    "Invoke OTG Token Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${OTGTokenFunctionArn}"
      },
      "Next": "Is otgLambdaResult Present",
      "ResultPath": "$.otgLambdaResult"
    },
    "Is otgLambdaResult Present": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.otgLambdaResult.Payload.token",
              "IsPresent": true
            },
            {
              "Variable": "$.otgLambdaResult.Payload.expiry",
              "IsPresent": true
            }
          ],
          "Next": "Relocate bearerToken"
        }
      ],
      "Default": "Err: OTG Token Lambda responded unexpectedly"
    },
    "Err: OTG Token Lambda responded unexpectedly": {
      "Type": "Fail",
      "Error": "OTG Token Lambda responded unexpectedly"
    },
    "Relocate bearerToken": {
      "Type": "Pass",
      "Next": "GetParameter QuestionsUrl",
      "ResultPath": "$.bearerToken",
      "Parameters": {
        "value.$": "$.otgLambdaResult.Payload.token",
        "expiry.$": "$.otgLambdaResult.Payload.expiry"
      }
    },
    "GetParameter QuestionsUrl": {
      "Type": "Task",
      "Parameters": {
        "Name": "${QuestionsUrl}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "GetParameter User Agent",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.parameters.url"
    },
    "GetParameter User Agent": {
      "Type": "Task",
      "Parameters": {
        "Name": "${UserAgent}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "GetParameter Issuer",
      "ResultPath": "$.parameters.userAgent",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      }
    },
    "GetParameter Issuer": {
      "Type": "Task",
      "Parameters": {
        "Name": "${Issuer}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Invoke FetchQuestions Lambda",
      "ResultPath": "$.parameters.issuer",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      }
    },
    "Invoke FetchQuestions Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${FetchQuestionsArn}"
      },
      "Next": "Is fetchQuestionsState present?"
    },
    "Is fetchQuestionsState present?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Payload.fetchQuestionsState",
          "IsPresent": true,
          "Next": "Success FetchQuestionsState returned"
        }
      ],
      "Default": "Err: FetchQuestions Lambda responded unexpectedly"
    },
    "Err: FetchQuestions Lambda responded unexpectedly": {
      "Type": "Fail",
      "Error": "FetchQuestions Lambda responded unexpectedly"
    },
    "Success FetchQuestionsState returned": {
      "Type": "Succeed",
      "Comment": "Contains FetchQuestionsState"
    }
  }
}
