{
  "Comment": "State machine for saving answers submitted in the HMRC KBV journey",
  "StartAt": "Parse input",
  "States": {
    "Parse input": {
      "Type": "Pass",
      "Next": "Query database for the users questions",
      "Parameters": {
        "sessionId.$": "$.sessionId",
        "inputAnswer.$": "$.value",
        "answeredQuestionKey.$": "$.key"
      }
    },
    "Query database for the users questions": {
      "Type": "Task",
      "Next": "Find answered question",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.usersQuestions"
    },
    "Find answered question": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Is the current question the answered question",
        "States": {
          "Is the current question the answered question": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.item.M.questionKey.S",
                "StringEqualsPath": "$.context.answeredQuestionKey",
                "Next": "Update answered question",
                "Comment": "current question"
              }
            ],
            "Default": "Do Nothing"
          },
          "Do Nothing": {
            "Type": "Pass",
            "End": true,
            "Result": {}
          },
          "Update answered question": {
            "Type": "Pass",
            "Parameters": {
              "M": {
                "questionKey.$": "$.item.M.questionKey.S",
                "answer.$": "$.context.inputAnswer"
              }
            },
            "End": true
          }
        }
      },
      "Next": "Get previous answers",
      "ItemsPath": "$.usersQuestions.Items[0].questions.L",
      "MaxConcurrency": 1,
      "ItemSelector": {
        "context.$": "$",
        "item.$": "$$.Map.Item.Value"
      },
      "ResultPath": "$.answers"
    },
    "Get previous answers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Answers for session exists",
      "ResultPath": "$.dynamoResult"
    },
    "Answers for session exists": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.dynamoResult.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.dynamoResult.Item.sessionId.S",
              "StringEqualsPath": "$.sessionId"
            }
          ],
          "Comment": "Answers Exists",
          "Next": "Update answer in the database"
        }
      ],
      "Default": "Put the answer in the database"
    },
    "Put the answer in the database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Item": {
          "sessionId": {
            "S.$": "$.sessionId"
          },
          "correlationId": {
            "S.$": "$.usersQuestions.Items[0].correlationId.S"
          },
          "ttl": {
            "S": "$.time"
          },
          "answers": {
            "L.$": "$.answers[?(@.M)]"
          }
        }
      },
      "ResultPath": "$.updateDynamoResults",
      "Next": "Iterate over questions"
    },
    "Update answer in the database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        },
        "UpdateExpression": "SET answers = list_append(answers, :newList)",
        "ExpressionAttributeValues": {
          ":newList": {
            "L.$": "$.answers[?(@.M)]"
          }
        }
      },
      "Next": "Iterate over questions",
      "ResultPath": "$.updateDynamoResults"
    },
    "Iterate over questions": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Is answered question the current question",
        "States": {
          "Is answered question the current question": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.item.M.questionKey.S",
                "StringEqualsPath": "$.context.answeredQuestionKey",
                "Next": "Map questions answered",
                "Comment": "Yes"
              }
            ],
            "Default": "Maintain exisiting question state"
          },
          "Maintain exisiting question state": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "M": {
                "questionKey.$": "$.item.M.questionKey",
                "answered": {
                  "BOOL.$": "$.item.M.answered.Bool"
                },
                "info.$": "$.item.M.info",
                "order.$": "$.item.M.order"
              }
            }
          },
          "Map questions answered": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "M": {
                "questionKey.$": "$.item.M.questionKey",
                "answered": {
                  "BOOL": true
                },
                "info.$": "$.item.M.info",
                "order.$": "$.item.M.order"
              }
            }
          }
        }
      },
      "Next": "Update questions answered in the database",
      "ItemsPath": "$.usersQuestions.Items[0].questions.L",
      "ResultPath": "$.answeredQuestionsMap",
      "ItemSelector": {
        "context.$": "$",
        "item.$": "$$.Map.Item.Value"
      }
    },
    "Update questions answered in the database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        },
        "UpdateExpression": "SET questions = :updatedQuestions",
        "ExpressionAttributeValues": {
          ":updatedQuestions": {
            "L.$": "$.answeredQuestionsMap"
          }
        }
      },
      "Next": "Calculate array lengths",
      "ResultPath": "$.updateDynamoResults"
    },
    "Calculate array lengths": {
      "Type": "Pass",
      "Next": "Check to see if there are any more unanswered questions",
      "Parameters": {
        "answeredQuestionsLength.$": "States.ArrayLength($.answeredQuestionsMap[?(@.M.answered.BOOL==true)])",
        "totalQuestionsLength.$": "States.ArrayLength($.usersQuestions.Items[0].questions.L)"
      },
      "ResultPath": "$.arrayLengths"
    },
    "Check to see if there are any more unanswered questions": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.arrayLengths.answeredQuestionsLength ",
          "NumericEqualsPath": "$.arrayLengths.totalQuestionsLength ",
          "Next": "Get Bearer Token"
        }
      ],
      "Default": "Response Filter"
    },
    "Get Bearer Token": {
      "Type": "Task",
      "Parameters": {
        "SecretId": "HMRCBearerToken"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "Next": "Get Answers URL and User Agent",
      "ResultSelector": {
        "value.$": "$.SecretString"
      },
      "ResultPath": "$.bearerToken"
    },
    "Get Answers URL and User Agent": {
      "Type": "Task",
      "Next": "Invoke Submit Answers Lambda",
      "Parameters": {
        "Names": ["${AnswersUrl}", "${UserAgent}"]
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "url.$": "$.Parameters[0].Value",
        "userAgent.$": "$.Parameters[1].Value"
      }
    },
    "Invoke Submit Answers Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${SubmitAnswersArn}"
      },
      "Next": "Fetch Auth Code Expiry"
    },
    "Fetch Auth Code Expiry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CreateAuthCodeFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Set Auth Code for Session",
      "ResultPath": "$.expiry"
    },
    "Set Auth Code for Session": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${SessionTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCode = :authCode, authorizationCodeExpiryDate = :expiry",
        "ExpressionAttributeValues": {
          ":authCode": {
            "S.$": "States.UUID()"
          },
          ":expiry": {
            "N.$": "States.Format('{}',$.expiry.Payload.authCodeExpiry)"
          }
        }
      },
      "Next": "Response Filter"
    },
    "Response Filter": {
      "Type": "Pass",
      "Next": "Success",
      "Result": {}
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
