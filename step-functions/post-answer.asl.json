{
  "Comment": "State machine for saving answers submitted in the HMRC KBV journey",
  "StartAt": "Capture Execution Id",
  "States": {
    "Capture Execution Id": {
      "Type": "Pass",
      "Next": "Check Session-Id is Present",
      "ResultPath": "$.statemachine",
      "Parameters": {
        "executionId.$": "$$.Execution.Id"
      }
    },
    "Check Session-Id is Present": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sessionId",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionId",
              "IsString": true
            }
          ],
          "Next": "DynamoDB Get SessionItem"
        }
      ],
      "Default": "Err: SessionId missing"
    },
    "Err: SessionId missing": {
      "Type": "Fail",
      "Error": "SessionId missing or not found"
    },
    "DynamoDB Get SessionItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${SessionTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Was a SessionItem found",
      "TimeoutSeconds": 5,
      "ResultPath": "$.sessionItem",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Comment": "Error getting sessionItem",
          "Next": "Err: SessionItem not found"
        }
      ]
    },
    "Was a SessionItem found": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.sessionItem.Item",
          "IsPresent": true,
          "Next": "Is there a valid sessionItem for the sessionId"
        }
      ],
      "Default": "Err: SessionItem not found"
    },
    "Is there a valid sessionItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sessionItem.Item.sessionId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.expiryDate.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.clientIpAddress.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.redirectUri.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.createdDate.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.clientId.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.subject.S",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.attemptCount.N",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionItem.Item.state.S",
              "IsPresent": true
            }
          ],
          "Next": "Unmarshall SessionItem (Step1)"
        }
      ],
      "Default": "Err: SessionItem not valid"
    },
    "Err: SessionItem not valid": {
      "Type": "Fail",
      "Error": "SessionItem not valid"
    },
    "Unmarshall SessionItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "statemachine.$": "$.statemachine",
          "marshalledPayload.$": "$.sessionItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall SessionItem (Step 2)",
      "ResultPath": "$.sessionItem"
    },
    "Unmarshall SessionItem (Step 2)": {
      "Type": "Pass",
      "Next": "Invoke Validating Answers Lambda",
      "ResultPath": "$.sessionItem",
      "InputPath": "$.sessionItem.Payload"
    },
    "Invoke Validating Answers Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${AnswerValidationArn}"
      },
      "Next": "Has the answer passed validation",
      "ResultSelector": {
        "validated.$": "$.Payload.validated"
      },
      "ResultPath": "$.result"
    },
    "Has the answer passed validation": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.result.validated",
              "IsPresent": true
            },
            {
              "Variable": "$.result.validated",
              "BooleanEquals": true
            }
          ],
          "Next": "Remap Input Data (answeredQuestionKey and inputAnswer)"
        }
      ],
      "Default": "Err: Answers failed validation"
    },
    "Err: Answers failed validation": {
      "Type": "Fail",
      "Error": "Answers failed validation"
    },
    "Remap Input Data (answeredQuestionKey and inputAnswer)": {
      "Type": "Pass",
      "Next": "Query database for the users questions",
      "Parameters": {
        "sessionId.$": "$.sessionId",
        "sessionItem.$": "$.sessionItem",
        "statemachine.$": "$.statemachine",
        "inputAnswer.$": "$.value",
        "answeredQuestionKey.$": "$.key"
      }
    },
    "Query database for the users questions": {
      "Type": "Task",
      "Next": "Find answered question",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.usersQuestions"
    },
    "Find answered question": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Is the current question the answered question",
        "States": {
          "Is the current question the answered question": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.item.M.questionKey.S",
                "StringEqualsPath": "$.context.answeredQuestionKey",
                "Next": "Update answered question",
                "Comment": "current question"
              }
            ],
            "Default": "Do Nothing"
          },
          "Do Nothing": {
            "Type": "Pass",
            "End": true,
            "Result": {}
          },
          "Update answered question": {
            "Type": "Pass",
            "Parameters": {
              "M": {
                "questionKey.$": "$.item.M.questionKey.S",
                "answer.$": "$.context.inputAnswer"
              }
            },
            "End": true
          }
        }
      },
      "Next": "Get saved answers",
      "ItemsPath": "$.usersQuestions.Items[0].questions.L",
      "MaxConcurrency": 1,
      "ItemSelector": {
        "context.$": "$",
        "item.$": "$$.Map.Item.Value"
      },
      "ResultPath": "$.answers"
    },
    "Get saved answers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Saved answers for session exists",
      "ResultPath": "$.dynamoResult"
    },
    "Saved answers for session exists": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.dynamoResult.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.dynamoResult.Item.sessionId.S",
              "StringEqualsPath": "$.sessionId"
            }
          ],
          "Comment": "Answers Exists",
          "Next": "Update answer in the database"
        }
      ],
      "Default": "Put the answer in the database"
    },
    "Put the answer in the database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Item": {
          "sessionId": {
            "S.$": "$.sessionId"
          },
          "correlationId": {
            "S.$": "$.usersQuestions.Items[0].correlationId.S"
          },
          "expiryDate": {
            "N.$": "States.JsonToString($.sessionItem.expiryDate)"
          },
          "answers": {
            "L.$": "$.answers[?(@.M)]"
          }
        }
      },
      "ResultPath": "$.updateDynamoResults",
      "Next": "Iterate over questions"
    },
    "Update answer in the database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        },
        "UpdateExpression": "SET answers = list_append(answers, :newList)",
        "ExpressionAttributeValues": {
          ":newList": {
            "L.$": "$.answers[?(@.M)]"
          }
        }
      },
      "Next": "Iterate over questions",
      "ResultPath": "$.updateDynamoResults"
    },
    "Iterate over questions": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Is answered question the current question",
        "States": {
          "Is answered question the current question": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.item.M.questionKey.S",
                "StringEqualsPath": "$.context.answeredQuestionKey",
                "Next": "Map questions answered",
                "Comment": "Yes"
              }
            ],
            "Default": "Maintain exisiting question state"
          },
          "Maintain exisiting question state": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "M": {
                "questionKey.$": "$.item.M.questionKey",
                "answered": {
                  "BOOL.$": "$.item.M.answered.Bool"
                },
                "info.$": "$.item.M.info",
                "order.$": "$.item.M.order"
              }
            }
          },
          "Map questions answered": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "M": {
                "questionKey.$": "$.item.M.questionKey",
                "answered": {
                  "BOOL": true
                },
                "info.$": "$.item.M.info",
                "order.$": "$.item.M.order"
              }
            }
          }
        }
      },
      "Next": "Update questions answered in the database",
      "ItemsPath": "$.usersQuestions.Items[0].questions.L",
      "ResultPath": "$.answeredQuestionsMap",
      "ItemSelector": {
        "context.$": "$",
        "item.$": "$$.Map.Item.Value"
      }
    },
    "Update questions answered in the database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        },
        "UpdateExpression": "SET questions = :updatedQuestions",
        "ExpressionAttributeValues": {
          ":updatedQuestions": {
            "L.$": "$.answeredQuestionsMap"
          }
        }
      },
      "Next": "Calculate array lengths",
      "ResultPath": "$.updateDynamoResults"
    },
    "Calculate array lengths": {
      "Type": "Pass",
      "Next": "Has the user already answered all questions",
      "Parameters": {
        "answeredQuestionsLength.$": "States.ArrayLength($.answeredQuestionsMap[?(@.M.answered.BOOL==true)])",
        "totalQuestionsLength.$": "States.ArrayLength($.usersQuestions.Items[0].questions.L)"
      },
      "ResultPath": "$.arrayLengths"
    },
    "Has the user already answered all questions": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.arrayLengths.answeredQuestionsLength ",
            "NumericEqualsPath": "$.arrayLengths.totalQuestionsLength "
          },
          "Next": "Return Question State as Done"
        }
      ],
      "Default": "Get final saved answers"
    },
    "Get final saved answers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${AnswersTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Unmarshall savedAnswersItem (Step1)",
      "ResultPath": "$.savedAnswersItem"
    },
    "Unmarshall savedAnswersItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "sessionItem.$": "$.sessionItem",
          "statemachine.$": "$.statemachine",
          "marshalledPayload.$": "$.savedAnswersItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall savedAnswersItem (Step 2)",
      "ResultPath": "$.savedAnswersItem"
    },
    "Unmarshall savedAnswersItem (Step 2)": {
      "Type": "Pass",
      "Next": "DynamoDB Get PersonIdentityItem",
      "ResultPath": "$.savedAnswersItem",
      "InputPath": "$.savedAnswersItem.Payload"
    },
    "DynamoDB Get PersonIdentityItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${PersonIdentityTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Is there a PersonIdentityItem for the sessionId",
      "TimeoutSeconds": 5,
      "ResultPath": "$.personIdentityItem"
    },
    "Is there a PersonIdentityItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.Item",
          "IsPresent": true,
          "Next": "Unmarshall PersonIdentityItem (Step1)"
        }
      ],
      "Default": "Err: PersonIdentityItem not found"
    },
    "Unmarshall PersonIdentityItem (Step1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${DynamoUnmarshallArn}",
        "Payload": {
          "sessionItem.$": "$.sessionItem",
          "statemachine.$": "$.statemachine",
          "marshalledPayload.$": "$.personIdentityItem.Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Unmarshall PersonIdentityItem (Step2)",
      "ResultPath": "$.personIdentityItem"
    },
    "Unmarshall PersonIdentityItem (Step2)": {
      "Type": "Pass",
      "InputPath": "$.personIdentityItem.Payload",
      "ResultPath": "$.personIdentityItem",
      "Next": "Does PersonIdentityItem have a socialSecurityRecord with personalNumber present"
    },
    "Does PersonIdentityItem have a socialSecurityRecord with personalNumber present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.socialSecurityRecord[0].personalNumber",
          "IsPresent": true,
          "Next": "Fetch Parameters via SSM Lambda"
        }
      ],
      "Default": "Err: NINO was not present in shared claims"
    },
    "Err: PersonIdentityItem not found": {
      "Type": "Fail",
      "Error": "PersonIdentityItem not found"
    },
    "Err: NINO was not present in shared claims": {
      "Type": "Fail",
      "Error": "NINO was not present in shared claims"
    },
    "Return Question State as Done": {
      "Type": "Pass",
      "Next": "Success",
      "Result": {
        "questionState": "Done"
      }
    },
    "Fetch Parameters via SSM Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SSMParametersFunctionArn}",
        "Payload": {
          "sessionItem.$": "$.sessionItem",
          "statemachine.$": "$.statemachine",
          "requestedParameters": [
            "${OtgApiUrl}",
            "${AnswersUrl}",
            "${UserAgent}",
            "${Issuer}"
          ]
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Is ssmParametersResult.result present",
      "ResultPath": "$.ssmParametersResult"
    },
    "Is ssmParametersResult.result present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ssmParametersResult.Payload.result",
          "IsPresent": true,
          "Next": "Relocate Parameters result to parameters"
        }
      ],
      "Default": "Err: Failed to Retrieve SSM Parameters"
    },
    "Err: Failed to Retrieve SSM Parameters": {
      "Type": "Fail",
      "Error": "Failed to Retrieve SSM Parameters"
    },
    "Relocate Parameters result to parameters": {
      "Type": "Pass",
      "Next": "Invoke OTG Token Lambda",
      "InputPath": "$.ssmParametersResult.Payload.result",
      "ResultPath": "$.parameters"
    },
    "Invoke OTG Token Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${OTGTokenFunctionArn}"
      },
      "Next": "Is otgLambdaResult Present",
      "ResultPath": "$.otgLambdaResult"
    },
    "Is otgLambdaResult Present": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.otgLambdaResult.Payload.token",
              "IsPresent": true
            },
            {
              "Variable": "$.otgLambdaResult.Payload.expiry",
              "IsPresent": true
            }
          ],
          "Next": "Relocate bearerToken"
        }
      ],
      "Default": "Err: OTG Token Lambda responded unexpectedly"
    },
    "Relocate bearerToken": {
      "Type": "Pass",
      "Next": "Invoke Submit Answers Lambda",
      "ResultPath": "$.bearerToken",
      "Parameters": {
        "value.$": "$.otgLambdaResult.Payload.token",
        "expiry.$": "$.otgLambdaResult.Payload.expiry"
      }
    },
    "Invoke Submit Answers Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${SubmitAnswersArn}"
      },
      "Next": "Was the answer saved sucessfully",
      "ResultPath": "$.submitAnswerResult"
    },
    "Was the answer saved sucessfully": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.submitAnswerResult.Payload.messsage",
              "IsPresent": true
            },
            {
              "Variable": "$.submitAnswerResult.Payload.messsage",
              "StringEquals": "AnswerResults Saved"
            }
          ],
          "Next": "Fetch Auth Code Expiry"
        }
      ],
      "Default": "Err: Submit Answers Lambda responded unexpectedly"
    },
    "Err: Submit Answers Lambda responded unexpectedly": {
      "Type": "Fail",
      "Error": "Submit Answers Lambda responded unexpectedly"
    },
    "Fetch Auth Code Expiry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CreateAuthCodeFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "is authCodeExpiry present"
    },
    "is authCodeExpiry present": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.Payload.authCodeExpiry",
              "IsPresent": true
            },
            {
              "Variable": "$.Payload.authCodeExpiry",
              "IsNumeric": true
            }
          ],
          "Next": "Set Auth Code for Session"
        }
      ],
      "Default": "Err: CreateAuthCodeFunction responded unexpectedly"
    },
    "Err: CreateAuthCodeFunction responded unexpectedly": {
      "Type": "Fail",
      "Error": "CreateAuthCodeFunction responded unexpectedly"
    },
    "Set Auth Code for Session": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${SessionTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCode = :authCode, authorizationCodeExpiryDate = :expiry",
        "ExpressionAttributeValues": {
          ":authCode": {
            "S.$": "States.UUID()"
          },
          ":expiry": {
            "N.$": "States.Format('{}',$.Payload.authCodeExpiry)"
          }
        }
      },
      "Next": "Return Question State as Saved"
    },
    "Return Question State as Saved": {
      "Type": "Pass",
      "Next": "Success",
      "Result": {
        "questionState": "Saved"
      }
    },
    "Err: OTG Token Lambda responded unexpectedly": {
      "Type": "Fail",
      "Error": "OTG Token Lambda responded unexpectedly"
    },
    "Err: SessionItem not found": {
      "Type": "Fail",
      "Error": "SessionItem not found"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
