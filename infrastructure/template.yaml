AWSTemplateFormatVersion: "2010-09-09"
Description: Digital Identity IPV CRI KBV HMRC API
Transform: [AWS::LanguageExtensions, AWS::Serverless-2016-10-31]
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W2031
        - W1020

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
    Default: "cri-vpc"
  CodeSigningConfigArn:
    Type: String
    Default: ""
  PermissionsBoundary:
    Type: String
    Default: ""
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, build, staging, integration, production]
  AuditEventNamePrefix:
    Description: "The audit event name prefix"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/AuditEventNamePrefix"
  CriIdentifier:
    Description: "The unique credential issuer identifier"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/CriIdentifier"
  CommonStackName:
    Type: String
    Default: common-cri-api
    Description: The name of the stack containing the common CRI lambdas/infra
  ParameterPrefix:
    Type: String
    Default: "none"
    Description: If set the this value will be used for ParameterStore prefix instead of AWS::StackName
  DeploymentType:
    Type: String
    Default: "pipeline"
    Description: Private Api gateway resources are not be reachable in stacks deployed via pipelines, this override enables less restrictive settings for manual/pre-merge-test deployments.
  UseApiKey:
    Type: String
    Default: "true"
    Description: Value used to indicate if the public api should be protected by a api key.
  BearerTokenName:
    Type: String
    Default: HMRCBearerToken
    Description: >-
      The name of the bearer token parameter.
      Temporary solution to be changed once cross account behaviour implemented.
  TxmaStackName:
    Description: "The stack containing the TXMA infrastructure"
    Type: String
    Default: txma-infrastructure

Conditions:
  # Avoid adding a standalone IsDevEnv condition
  # As "dev" covers multiple configurations - pipeline, manual, pre-merge and preview
  IsDeployedFromPipeline:
    Fn::Equals:
      - !Ref DeploymentType
      - "pipeline"
  # Don't send logs in dev to avoid overwhelming the destination with debug
  LogSendingEnabled: !And
    - !Not [!Equals [!Ref Environment, "dev"]]
    - !Condition IsDeployedFromPipeline
  EnforceCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, ""]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, ""]]
  UseParameterPrefix:
    Fn::Not:
      - Fn::Equals:
          - !Ref ParameterPrefix
          - "none"
  IsProdEnvironment:
    Fn::Equals:
      - !Ref Environment
      - production

Globals:
  Function:
    Timeout: 30
    CodeUri: ..
    Runtime: nodejs18.x
    Architectures: [arm64]
    MemorySize: 256
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        AWS_STACK_NAME: !Sub ${AWS::StackName}
        POWERTOOLS_LOG_LEVEL: INFO
        SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
        SQS_AUDIT_EVENT_PREFIX: !Ref AuditEventNamePrefix
        POWERTOOLS_METRICS_NAMESPACE: !Ref CriIdentifier
        PARAMETER_PREFIX:
          !If [UseParameterPrefix, !Ref ParameterPrefix, !Ref AWS::StackName]
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: true
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
    Layers:
      - !Sub
        - "{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}" # or NODEJS_LAYER or PYTHON_LAYER
        - SecretArn:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              dynatraceSecretArn,
            ]

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      VerifiableCredentialMaxJwtTtl: 2
      VerifiableCredentialJwtTtlUnit: HOURS
      StateMachineLoggingIncludeExecutionData: true
      StateMachineLoggingLevel: "ALL"
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      VerifiableCredentialMaxJwtTtl: 2
      VerifiableCredentialJwtTtlUnit: HOURS
      StateMachineLoggingIncludeExecutionData: true
      StateMachineLoggingLevel: "ALL"
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      VerifiableCredentialMaxJwtTtl: 6
      VerifiableCredentialJwtTtlUnit: MONTHS
      StateMachineLoggingIncludeExecutionData: true
      StateMachineLoggingLevel: "ALL"
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      VerifiableCredentialMaxJwtTtl: 6
      VerifiableCredentialJwtTtlUnit: MONTHS
      StateMachineLoggingIncludeExecutionData: false # PII in state data
      StateMachineLoggingLevel: "ALL"
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      VerifiableCredentialMaxJwtTtl: 6
      VerifiableCredentialJwtTtlUnit: MONTHS
      StateMachineLoggingIncludeExecutionData: false # PII in state data
      StateMachineLoggingLevel: "ALL"

Resources:
  ####################################################################
  #                                                                  #
  # API Gateway                                                      #
  #                                                                  #
  ####################################################################

  PublicKbvHmrcApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-PublicKbvHmrcApi"
      Description: Public KBV HMRC CRI API
      StageName: !Ref Environment
      Auth:
        ApiKeyRequired: !Ref UseApiKey
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          # Disable data trace in production to avoid logging customer sensitive information
          DataTraceEnabled: !If [IsProdEnvironment, false, true]
          MetricsEnabled: true
          ThrottlingRateLimit: 200
          ThrottlingBurstLimit: 400
      AccessLogSetting:
        DestinationArn: !GetAtt PublicKbvHmrcApiAccessLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      DefinitionBody:
        openapi: 3.0.1
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: {}
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./public-api.yaml"
          securitySchemes: !If
            - IsDeployedFromPipeline
            - api_key:
                type: "apiKey"
                name: "x-api-key"
                in: "header"
            - !Ref "AWS::NoValue"
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  PublicKbvHmrcApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-${PublicKbvHmrcApi}-public-AccessLogs
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PublicKbvHmrcApiAccessLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref PublicKbvHmrcApiAccessLogGroup

  PrivateKbvHmrcApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-PrivateKbvHmrcApi"
      Description: Private KBV HMRC CRI API
      StageName: !Ref Environment
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          # Disable data trace in production to avoid logging customer sensitive information
          DataTraceEnabled: !If [IsProdEnvironment, false, true]
          MetricsEnabled: true
          ThrottlingRateLimit: 200
          ThrottlingBurstLimit: 400
      AccessLogSetting:
        DestinationArn: !GetAtt PrivateKbvHmrcApiAccessLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: {} # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./private-api.yaml"
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: !If [IsDeployedFromPipeline, PRIVATE, REGIONAL]
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Action: "execute-api:Invoke"
              Effect: Allow
              Principal: "*"
              Resource:
                - "execute-api:/*"
            - !If
              - IsDeployedFromPipeline
              - Action: "execute-api:Invoke"
                Effect: Deny
                Principal: "*"
                Resource:
                  - "execute-api:/*"
                Condition:
                  StringNotEquals:
                    aws:SourceVpce:
                      - Fn::ImportValue: !Sub "${VpcStackName}-ExecuteApiGatewayEndpointId"
              - !Ref AWS::NoValue

  PrivateKbvHmrcApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-${PrivateKbvHmrcApi}-private-AccessLogs
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PrivateKbvHmrcApiAccessLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref PrivateKbvHmrcApiAccessLogGroup

  ExecuteStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to allow API gateway to execute step functions
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: AllowStateMachineInvoke
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - states:StartExecution
                  - states:StartSyncExecution
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ExecuteStateMachineFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Timeout: 60
      Handler: lambdas/execute-state-machine/src/execute-state-machine-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - states:StartSyncExecution
              - states:StartExecution
            Resource:
              - !Ref FetchQuestionsStateMachine

  ####################################################################
  #                                                                  #
  # FetchQuestionsStateMachine                                       #
  #                                                                  #
  ####################################################################

  FetchQuestionsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: !Sub ${AWS::StackName}-FetchQuestionsStateMachine
      DefinitionUri: ../step-functions/fetch-questions.asl.json
      DefinitionSubstitutions:
        OtgApiUrl: !If
          - UseParameterPrefix
          - !Sub "/${ParameterPrefix}/OtgApiUrl"
          - !Sub "/${AWS::StackName}/OtgApiUrl"
        QuestionsTableName: !Ref QuestionsTable
        QuestionsUrl: !If
          - UseParameterPrefix
          - !Sub "/${ParameterPrefix}/QuestionsUrl"
          - !Sub "/${AWS::StackName}/QuestionsUrl"
        UserAgent: !Ref UserAgent
        OTGTokenFunctionArn: !GetAtt OTGTokenFunction.Arn
        FetchQuestionsArn: !GetAtt FetchQuestionsFunction.Arn
        BearerTokenName: !Ref BearerTokenName
        SessionTtl: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTtl}}"
        SessionTableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        PersonIdentityTableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt FetchQuestionsStateMachineLogGroup.Arn
        IncludeExecutionData:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingIncludeExecutionData,
          ]
        Level:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingLevel,
          ]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BearerTokenName}-??????
        - LambdaInvokePolicy:
            FunctionName: !Ref OTGTokenFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref FetchQuestionsFunction
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTtl"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTableName"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/PersonIdentityTableName"
              - !Sub
                - "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PREFIX}/QuestionsUrl"
                - PREFIX:
                    !If [
                      UseParameterPrefix,
                      !Ref ParameterPrefix,
                      !Ref AWS::StackName,
                    ]
              - !Sub
                - "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PREFIX}/OtgApiUrl"
                - PREFIX:
                    !If [
                      UseParameterPrefix,
                      !Ref ParameterPrefix,
                      !Ref AWS::StackName,
                    ]
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${UserAgent}
        - Statement:
            Effect: Allow
            Action: logs:*
            Resource: "*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  FetchQuestionsStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}-FetchQuestionsStateMachine-logs
      RetentionInDays: 30

  FetchQuestionsStateMachineLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref FetchQuestionsStateMachineLogGroup

  ####################################################################
  #                                                                  #
  # CheckSessionStateMachine                                         #
  #                                                                  #
  ####################################################################

  CheckSessionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: !Sub ${AWS::StackName}-CheckSession
      DefinitionUri: ../step-functions/check_session.asl.json
      DefinitionSubstitutions:
        CurrentTimeFunctionArn: !GetAtt CurrentTimeFunction.Arn
        CommonStackName: !Ref CommonStackName
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CheckSessionStateMachineLogGroup.Arn
        IncludeExecutionData:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingIncludeExecutionData,
          ]
        Level:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingLevel,
          ]
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CurrentTimeFunction
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - Statement:
            Effect: Allow
            Action: logs:*
            Resource: "*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  CheckSessionStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}-CheckSession-state-machine-logs
      RetentionInDays: 30

  CheckSessionStateMachineLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref CheckSessionStateMachineLogGroup

  ####################################################################
  #                                                                  #
  # GetQuestionStateMachine                                          #
  #                                                                  #
  ####################################################################

  GetQuestionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: !Sub ${AWS::StackName}-GetQuestion
      DefinitionUri: ../step-functions/get-question.asl.json
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt GetQuestionStateMachineLogGroup.Arn
        IncludeExecutionData:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingIncludeExecutionData,
          ]
        Level:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingLevel,
          ]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - Statement:
            Effect: Allow
            Action: logs:*
            Resource: "*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      DefinitionSubstitutions:
        PersonIdentityTableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        QuestionsTableName: !Ref QuestionsTable

  GetQuestionStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}-GetQuestion-state-machine-logs
      RetentionInDays: 30

  GetQuestionStateMachineLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref GetQuestionStateMachineLogGroup

  ####################################################################
  #                                                                  #
  # PostAnswerStateMachine                                           #
  #                                                                  #
  ####################################################################

  PostAnswerStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: !Sub ${AWS::StackName}-PostAnswer
      DefinitionUri: ../step-functions/post-answer.asl.json
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt PostAnswerStateMachineLogGroup.Arn
        IncludeExecutionData:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingIncludeExecutionData,
          ]
        Level:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingLevel,
          ]
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref OTGTokenFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateAuthCodeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SubmitAnswerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref AnswerValidationFunction
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref AnswersTable
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBWritePolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref AnswersTable
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTableName
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/PersonIdentityTableName"
              - !Sub
                - "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PREFIX}/AnswersUrl"
                - PREFIX:
                    !If [
                      UseParameterPrefix,
                      !Ref ParameterPrefix,
                      !Ref AWS::StackName,
                    ]
              - !Sub
                - "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PREFIX}/OtgApiUrl"
                - PREFIX:
                    !If [
                      UseParameterPrefix,
                      !Ref ParameterPrefix,
                      !Ref AWS::StackName,
                    ]
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${UserAgent}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BearerTokenName}-??????
        - Statement:
            Effect: Allow
            Action: logs:*
            Resource: "*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      DefinitionSubstitutions:
        OtgApiUrl: !If
          - UseParameterPrefix
          - !Sub "/${ParameterPrefix}/OtgApiUrl"
          - !Sub "/${AWS::StackName}/OtgApiUrl"
        OTGTokenFunctionArn: !GetAtt OTGTokenFunction.Arn
        CommonStackName: !Ref CommonStackName
        CreateAuthCodeFunctionArn: !GetAtt CreateAuthCodeFunction.Arn
        AnswersTableName: !Ref AnswersTable
        QuestionsTableName: !Ref QuestionsTable
        SessionTableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        AnswersUrl: !If
          - UseParameterPrefix
          - !Sub "/${ParameterPrefix}/AnswersUrl"
          - !Sub "/${AWS::StackName}/AnswersUrl"
        UserAgent: !Ref UserAgent
        BearerTokenName: !Ref BearerTokenName
        SubmitAnswersArn: !GetAtt SubmitAnswerFunction.Arn
        AnswerValidationArn: !GetAtt AnswerValidationFunction.Arn

  PostAnswerStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}-PostAnswer-state-machine-logs
      RetentionInDays: 30

  PostAnswerStateMachineLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref PostAnswerStateMachineLogGroup

  ####################################################################
  #                                                                  #
  # IssueCredentialStateMachine                                      #
  #                                                                  #
  ####################################################################

  IssueCredentialStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: !Sub ${AWS::StackName}-IssueCredential
      DefinitionUri: ../step-functions/issue-credential.asl.json
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt IssueCredentialStateMachineLogGroup.Arn
        IncludeExecutionData:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingIncludeExecutionData,
          ]
        Level:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            StateMachineLoggingLevel,
          ]
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MaxJwtTtlParameter}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${JwtTtlUnitParameter}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/verifiableCredentialKmsSigningKeyId
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTableName
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/PersonIdentityTableName
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/verifiable-credential/issuer
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ResultsTable
        - LambdaInvokePolicy:
            FunctionName: !Ref TimeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref IssueCredentialFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref JwtSignerFunction
        - Statement:
            Effect: Allow
            Action: kms:Sign
            Resource: !ImportValue core-infrastructure-CriVcSigningKey1Arn
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt FetchQuestionsStateMachine.Name
        - Statement:
            Effect: Allow
            Action: logs:*
            Resource: "*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      DefinitionSubstitutions:
        QuestionsTableName: !Ref QuestionsTable
        MaxJwtTtlParameter: !Ref MaxJwtTtlParameter
        JwtTtlUnitParameter: !Ref JwtTtlUnitParameter
        TimeFunctionArn: !GetAtt TimeFunction.Arn
        SessionTableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        IssueCredentialArn: !GetAtt IssueCredentialFunction.Arn
        JwtSignerFunction: !GetAtt JwtSignerFunction.Arn
        CommonStackName: !Ref CommonStackName

  IssueCredentialStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}-IssueCredential-state-machine-logs
      RetentionInDays: 30

  IssueCredentialStateMachineLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref IssueCredentialStateMachineLogGroup

  ####################################################################
  #                                                                  #
  # OTGTokenFunction                                           #
  #                                                                  #
  ####################################################################

  OTGTokenFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/otg-token/src/otg-token-handler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-otgtoken"
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-otgtoken"
      Timeout: 15
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  OTGTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OTGTokenFunction}"
      RetentionInDays: 30

  OTGTokenFunctionsFunctionLogGroupLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref OTGTokenFunctionLogGroup

  ####################################################################
  #                                                                  #
  # FetchQuestionsFunction                                           #
  #                                                                  #
  ####################################################################

  FetchQuestionsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/fetch-questions/src/fetch-questions-handler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-fetchquestions"
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-fetchquestions"
          QUESTIONS_TABLE_NAME: !Ref QuestionsTable
          SQS_AUDIT_EVENT_PREFIX: !Ref AuditEventNamePrefix
          SQS_AUDIT_EVENT_QUEUE_URL:
            Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueUrl
      Timeout: 15
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - SQSSendMessagePolicy:
            QueueName:
              Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueName
        - KMSDecryptPolicy:
            KeyId: !ImportValue core-infrastructure-CriDecryptionKey1Id
        - Statement:
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              - Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueEncryptionKeyArn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  FetchQuestionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FetchQuestionsFunction}"
      RetentionInDays: 30

  FetchQuestionsFunctionLogGroupLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref FetchQuestionsFunctionLogGroup

  ####################################################################
  #                                                                  #
  # TimeFunction                                                     #
  #                                                                  #
  ####################################################################

  TimeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/issue-credential/src/time-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]

  TimeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-${TimeFunction}"
      RetentionInDays: 30

  TimeFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref TimeFunctionLogGroup

  ####################################################################
  #                                                                  #
  # CurrentTimeFunction                                              #
  #                                                                  #
  ####################################################################

  CurrentTimeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/time/src/current-time-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]

  CurrentTimeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-${CurrentTimeFunction}"
      RetentionInDays: 30

  CurrentTimeFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref CurrentTimeFunctionLogGroup

  ####################################################################
  #                                                                  #
  # SubmitAnswerFunction                                             #
  #                                                                  #
  ####################################################################

  SubmitAnswerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/submit-answer/src/submit-answer-handler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-submit-answer"
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-submit-answer"
          PERSON_IDENTITY_TABLE_NAME: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
          RESULTS_TABLE_NAME: !Ref ResultsTable
          CI_VALUE_PARAM_NAME: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/contraIndicator"
          SQS_AUDIT_EVENT_QUEUE_URL:
            Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueUrl
      Timeout: 15
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBWritePolicy:
            TableName: !Ref ResultsTable
        - SQSSendMessagePolicy:
            QueueName:
              Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueName
        - KMSDecryptPolicy:
            KeyId: !ImportValue core-infrastructure-CriDecryptionKey1Id
        - Statement:
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              - Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueEncryptionKeyArn
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/contraIndicator
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  SubmitAnswerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SubmitAnswerFunction}"
      RetentionInDays: 30

  SubmitAnswerFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref SubmitAnswerFunctionLogGroup

  ####################################################################
  #                                                                  #
  # CreateAuthCodeFunction                                           #
  #                                                                  #
  ####################################################################

  CreateAuthCodeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/submit-answer/src/create-auth-code-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]

  CreateAuthCodeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-${CreateAuthCodeFunction}"
      RetentionInDays: 30

  CreateAuthCodeFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref CreateAuthCodeFunctionLogGroup

  ####################################################################
  #                                                                  #
  # EvidenceCheckDetailsFunction                                     #
  #                                                                  #
  ####################################################################

  EvidenceCheckDetailsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/evidence-check-details/src/check-details-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]

  EvidenceCheckDetailsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-${EvidenceCheckDetailsFunction}"
      RetentionInDays: 30

  EvidenceCheckDetailsFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref EvidenceCheckDetailsFunctionLogGroup

  ####################################################################
  #                                                                  #
  # Issue Credential Function                                        #
  #                                                                  #
  ####################################################################

  IssueCredentialFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/issue-credential/src/issue-credential-handler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-issuecredential"
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-issuecredential"
          ENVIRONMENT: !Ref Environment
          RESULTS_TABLE_NAME: !Ref ResultsTable
          SQS_AUDIT_EVENT_QUEUE_URL:
            Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueUrl
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ResultsTable
        - SQSSendMessagePolicy:
            QueueName:
              Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueName
        - KMSDecryptPolicy:
            KeyId: !ImportValue core-infrastructure-CriDecryptionKey1Id
        - Statement:
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              - Fn::ImportValue: !Sub ${TxmaStackName}-AuditEventQueueEncryptionKeyArn
      Timeout: 15
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
          - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  IssueCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IssueCredentialFunction}"
      RetentionInDays: 30

  IssueCredentialFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref IssueCredentialFunctionLogGroup

  ####################################################################
  #                                                                  #
  # JWT Signer Function                                              #
  #                                                                  #
  ####################################################################

  JwtSignerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/jwt-signer/src/jwt-signer-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      Policies:
        - Statement:
            Effect: Allow
            Action: kms:Sign
            Resource: !ImportValue core-infrastructure-CriVcSigningKey1Arn
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-JwtSigner"

  JwtSignerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}/JwtSignerFunction
      RetentionInDays: 30

  JwtSignerFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref JwtSignerFunctionLogGroup

  ####################################################################
  #                                                                  #
  # Answer Validation Function                                       #
  #                                                                  #
  ####################################################################

  AnswerValidationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: lambdas/answer-validation/src/answer-validation-handler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-answer-validation"
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]

  AnswerValidationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AnswerValidationFunction}"
      RetentionInDays: 30

  AnswerValidationFunctionLogGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: LogSendingEnabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref AnswerValidationFunctionLogGroup

  ####################################################################
  #                                                                  #
  # Database Tables                                                  #
  #                                                                  #
  ####################################################################

  QuestionsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "questions-table-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  AnswersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "answers-table-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  ResultsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "results-table-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  ####################################################################
  #                                                                  #
  # API config                                                       #
  #                                                                  #
  ####################################################################

  PublicKbvHmrcApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: IsDeployedFromPipeline
    # DependsOn:
    #   - PublicKbvHmrcApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref PublicKbvHmrcApi
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        RateLimit: 200 # allowed requests per second
        BurstLimit: 400 # requests the API can handle concurrently

  PrivateKbvHmrcApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: IsDeployedFromPipeline
    # DependsOn:
    #   - PrivateKbvHmrcApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref PrivateKbvHmrcApi
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        RateLimit: 200 # allowed requests per second
        BurstLimit: 400 # requests the API can handle concurrently

  LinkUsagePlanApiKey1:
    Condition: IsDeployedFromPipeline
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey1
      KeyType: API_KEY
      UsagePlanId: !Ref PublicKbvHmrcApiUsagePlan

  LinkUsagePlanApiKey2:
    Condition: IsDeployedFromPipeline
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey2
      KeyType: API_KEY
      UsagePlanId: !Ref PublicKbvHmrcApiUsagePlan

  ####################################################################
  #                                                                  #
  # Parameters                                                       #
  #                                                                  #
  ####################################################################

  MaxJwtTtlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /${AWS::StackName}/MaxJwtTtl
      Value:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          VerifiableCredentialMaxJwtTtl,
        ]
      Description: Default time to live for an JWT in (seconds)

  JwtTtlUnitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /${AWS::StackName}/JwtTtlUnit
      Value:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          VerifiableCredentialJwtTtlUnit,
        ]
      Description: The unit for the time-to-live for an JWT e.g. (MONTHS)

  UserAgent:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /${AWS::StackName}/UserAgent
      Value: govuk-one-login
      Description: User agent for HMRC requests

  QuestionsUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /${AWS::StackName}/QuestionsUrl
      Value: https://test-api.service.hmrc.gov.uk/individuals/verification/identity-verification-questions/questions
      Description: URL for HMRC /questions endpoint

  AnswersUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /${AWS::StackName}/AnswersUrl
      Value: https://test-api.service.hmrc.gov.uk/individuals/verification/identity-verification-questions/answers
      Description: URL for HMRC /answers endpoint

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  ####################################################################
  #                                                                  #
  # Alerts                                                           #
  #                                                                  #
  ####################################################################

  OTGTokenRequestFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment} - OTG Token Request Failed Alarm"
      AlarmDescription: !Sub ${Environment} HMRC KBV Cri failed to retrieve a token from the OTG Service"
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicHmrcKbv
      OKActions:
        - !Ref AlarmTopicHmrcKbv
      InsufficientDataActions: []
      MetricName: FailedToRetrieveOTGToken
      Namespace: !Ref CriIdentifier
      Statistic: Sum
      Dimensions:
        - Name: service
          Value: !Sub "${CriIdentifier}-otgtoken"
        - Name: ServiceSpecific
          Value: OTGTokenRetrievalService
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  ####################################################################
  #                                                                  #
  # Alarm setup                                                      #
  #                                                                  #
  ####################################################################

  AlarmTopicHmrcKbv:
    Type: AWS::SNS::Topic
    Metadata:
      SamResourceId: AlarmTopicHmrcKbv

  AlarmTopicSubscriptionPagerDutyHmrcKbv:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: AlarmTopicHmrcKbv
      Endpoint:
        Fn::Sub: "{{resolve:ssm:/alerting/pagerduty/url}}"
      Protocol: https
    Metadata:
      SamResourceId: AlarmTopicSubscriptionPagerDutyHmrcKbv

  AlarmPublishToTopicPolicyHmrcKbv:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - Ref: AlarmTopicHmrcKbv
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource:
              Ref: AlarmTopicHmrcKbv
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn:
                  Fn::Sub: arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
    Metadata:
      SamResourceId: AlarmPublishToTopicPolicyHmrcKbv

####################################################################
#                                                                  #
# Outputs                                                          #
#                                                                  #
####################################################################

Outputs:
  PublicApiGatewayId:
    Description: API Gateway ID of the public HMRC KBV CRI API
    Value: !Ref PublicKbvHmrcApi
    Export:
      Name: !Sub ${AWS::StackName}-PublicApiGatewayId
  PrivateApiGatewayId:
    Description: API Gateway ID of the private HMRC KBV CRI API
    Value: !Ref PrivateKbvHmrcApi
    Export:
      Name: !Sub ${AWS::StackName}-PrivateApiGatewayId
  FetchQuestionsStateMachineArn:
    Description: Exported for integration test
    Value: !Ref FetchQuestionsStateMachine
  QuestionStateMachineArn:
    Description: Exported for integration test
    Value: !Ref GetQuestionStateMachine
  PostAnswerStateMachineArn:
    Description: Exported for integration test
    Value: !Ref PostAnswerStateMachine
  CommonAPISessionTableName:
    Description: Exported for integration test (Common API session table name)
    Value: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
  CommonAPIPersonIdentityTableName:
    Description: Exported for integration test (Common API person identity table name)
    Value: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
  QuestionsTableName:
    Description: Exported for integration test
    Value: !Ref QuestionsTable
  ResultsTableName:
    Description: Exported for integration test
    Value: !Ref ResultsTable
