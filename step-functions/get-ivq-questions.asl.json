{
  "Comment": "Populates the table of questions from the HMRC IVQ API",
  "StartAt": "Check session ID present",
  "States": {
    "Check session ID present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionId",
            "IsPresent": true
          },
          "Next": "Error Session ID missing"
        }
      ],
      "Default": "Check NINO present"
    },
    "Check NINO present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.nino",
            "IsPresent": true
          },
          "Next": "Error NINO missing"
        }
      ],
      "Default": "Query questions table for session ID"
    },
    "Error NINO missing": {
      "Type": "Pass",
      "End": true
    },
    "Error Session ID missing": {
      "Type": "Pass",
      "End": true
    },
    "Query questions table for session ID": {
      "Type": "Task",
      "Next": "Check if questions already exist for session",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.loadedQuestions"
    },
    "Check if questions already exist for session": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.loadedQuestions.Count",
          "NumericEquals": 0,
          "Next": "Get Bearer Token"
        }
      ],
      "Default": "Questions already loaded - Do Nothing"
    },
    "Get Bearer Token": {
      "Type": "Task",
      "Parameters": {
        "SecretId": "${BearerTokenName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "Next": "Get Questions URL and User Agent",
      "ResultSelector": {
        "value.$": "$.SecretString"
      },
      "ResultPath": "$.bearerToken"
    },
    "Get Questions URL and User Agent": {
      "Type": "Task",
      "Next": "Invoke FetchQuestions Lambda",
      "Parameters": {
        "Names": ["${QuestionsUrl}", "${UserAgent}"]
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "url.$": "$.Parameters[0].Value",
        "userAgent.$": "$.Parameters[1].Value"
      }
    },
    "Invoke FetchQuestions Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${FetchQuestionsArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Create Question Loop Counter",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Error: FetchQuestions threw Exception"
        }
      ]
    },
    "Create Question Loop Counter": {
      "Comment": "Set index to zero",
      "Type": "Pass",
      "Parameters": {
        "index": 0,
        "count.$": "States.ArrayLength($.Payload.questions)"
      },
      "ResultPath": "$.iterator",
      "Next": "finished looping over all the questions?"
    },
    "finished looping over all the questions?": {
      "Comment": "Check if index is less than or equal to number of questions in the response for get ivq questions",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.iterator.index",
          "NumericLessThanPath": "$.iterator.count",
          "Next": "get current question"
        }
      ],
      "Default": "Filter questions"
    },
    "get current question": {
      "Type": "Pass",
      "Parameters": {
        "count.$": "$.iterator.count",
        "currentQuestion.$": "States.ArrayGetItem($.Payload.questions, $.iterator.index)",
        "correlationId.$": "$.Payload.correlationId",
        "index.$": "$.iterator.index"
      },
      "Next": "Store question in DynamoDB",
      "ResultPath": "$.iterator"
    },
    "Store question in DynamoDB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "correlationId": {
            "S.$": "$.iterator.correlationId"
          },
          "questionKey": {
            "S.$": "$.iterator.currentQuestion.questionKey"
          },
          "info": {
            "M.$": "$.iterator.currentQuestion.info"
          },
          "answered": {
            "S": "false"
          }
        }
      },
      "ResultPath": "$.result",
      "Next": "increment index by one"
    },
    "increment index by one": {
      "Type": "Pass",
      "Parameters": {
        "count.$": "$.iterator.count",
        "currentQuestion.$": "$.iterator.currentQuestion",
        "correlationId.$": "$.iterator.correlationId",
        "index.$": "States.MathAdd($.iterator.index, 1)"
      },
      "Next": "continue looping?",
      "ResultPath": "$.iterator"
    },
    "continue looping?": {
      "Comment": "Exit loop when index exactly equal to number of questions",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.iterator.index",
          "NumericEqualsPath": "$.iterator.count",
          "Next": "Filter questions"
        }
      ],
      "Default": "finished looping over all the questions?"
    },
    "Filter questions": {
      "Type": "Pass",
      "Next": "Are there sufficient questions?"
    },
    "Error: FetchQuestions threw Exception": {
      "Type": "Pass",
      "End": true
    },
    "Are there sufficient questions?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionId",
            "IsPresent": true
          },
          "Next": "Log: Insufficient questions"
        }
      ],
      "Default": "Log: Question Metric"
    },
    "Log: Insufficient questions": {
      "Type": "Pass",
      "End": true
    },
    "Log: Question Metric": {
      "Type": "Pass",
      "End": true
    },
    "Questions already loaded - Do Nothing": {
      "Type": "Pass",
      "End": true
    }
  }
}
