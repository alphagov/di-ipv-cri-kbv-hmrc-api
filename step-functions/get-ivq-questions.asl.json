{
  "Comment": "Populates the table of questions from the HMRC IVQ API",
  "StartAt": "Check session ID present",
  "States": {
    "Check session ID present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionId",
            "IsPresent": true
          },
          "Next": "Error Session ID missing"
        }
      ],
      "Default": "Check NINO present"
    },
    "Check NINO present": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.nino",
            "IsPresent": true
          },
          "Next": "Error NINO missing"
        }
      ],
      "Default": "Query questions table for session ID"
    },
    "Error NINO missing": {
      "Type": "Pass",
      "End": true
    },
    "Error Session ID missing": {
      "Type": "Pass",
      "End": true
    },
    "Query questions table for session ID": {
      "Type": "Task",
      "Next": "Check if questions already exist for session",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.loadedQuestions"
    },
    "Check if questions already exist for session": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.loadedQuestions.Count",
          "NumericEquals": 0,
          "Next": "Get Bearer Token"
        }
      ],
      "Default": "Questions already loaded - Do Nothing"
    },
    "Get Bearer Token": {
      "Type": "Task",
      "Parameters": {
        "SecretId": "${BearerTokenName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "Next": "Get Questions URL and User Agent",
      "ResultSelector": {
        "value.$": "$.SecretString"
      },
      "ResultPath": "$.bearerToken"
    },
    "Get Questions URL and User Agent": {
      "Type": "Task",
      "Next": "Invoke FetchQuestions Lambda",
      "Parameters": {
        "Names": ["${QuestionsUrl}", "${UserAgent}"]
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "url.$": "$.Parameters[0].Value",
        "userAgent.$": "$.Parameters[1].Value"
      }
    },
    "Invoke FetchQuestions Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${FetchQuestionsArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Loop through questions",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Error: FetchQuestions threw Exception"
        }
      ],
      "ResultPath": "$.fetchQuestionsResponse"
    },
    "Loop through questions": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Store question in DynamoDB",
        "States": {
          "Store question in DynamoDB": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
              "TableName": "${QuestionsTableName}",
              "Item": {
                "sessionId": {
                  "S.$": "$$.Execution.Input.sessionId"
                },
                "correlationId": {
                  "S.$": "$.correlationId"
                },
                "questionKey": {
                  "S.$": "$.questionKey"
                },
                "info": {
                  "M.$": "$.info"
                },
                "answered": {
                  "S": "false"
                }
              }
            },
            "End": true
          }
        }
      },
      "Next": "Filter questions",
      "ItemsPath": "$.fetchQuestionsResponse.Payload.questions",
      "ResultPath": null,
      "ItemSelector": {
        "correlationId.$": "$.fetchQuestionsResponse.Payload.correlationId",
        "questionKey.$": "$$.Map.Item.Value.questionKey",
        "info.$": "$$.Map.Item.Value.info"
      }
    },
    "Filter questions": {
      "Type": "Pass",
      "Next": "Are there sufficient questions?"
    },
    "Error: FetchQuestions threw Exception": {
      "Type": "Pass",
      "End": true
    },
    "Are there sufficient questions?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionId",
            "IsPresent": true
          },
          "Next": "Log: Insufficient questions"
        }
      ],
      "Default": "Log: Question Metric"
    },
    "Log: Insufficient questions": {
      "Type": "Pass",
      "End": true
    },
    "Log: Question Metric": {
      "Type": "Pass",
      "End": true
    },
    "Questions already loaded - Do Nothing": {
      "Type": "Pass",
      "End": true
    }
  }
}
