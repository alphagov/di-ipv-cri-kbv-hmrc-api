{
  "Comment": "Return any unanswered question if available.",
  "StartAt": "Check Session-Id is Present",
  "States": {
    "Check Session-Id is Present": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sessionId",
              "IsPresent": true
            },
            {
              "Variable": "$.sessionId",
              "IsString": true
            }
          ],
          "Next": "DynamoDB Get SessionItem"
        }
      ],
      "Default": "Err: SessionId missing"
    },
    "Err: SessionId missing": {
      "Type": "Fail",
      "Error": "SessionId missing or not found"
    },
    "DynamoDB Get SessionItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${PersonIdentityTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Was a SessionItem found",
      "TimeoutSeconds": 5,
      "ResultPath": "$.sessionItem",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Comment": "Error getting sessionItem",
          "Next": "Err: SessionItem not found"
        }
      ]
    },
    "Was a SessionItem found": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.sessionItem.Item",
          "IsPresent": true,
          "Next": "DynamoDB Get PersonIdentityItem"
        }
      ],
      "Default": "Err: SessionItem not found"
    },
    "Err: SessionItem not found": {
      "Type": "Fail",
      "Error": "SessionItem not found"
    },
    "DynamoDB Get PersonIdentityItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${PersonIdentityTableName}",
        "Key": {
          "sessionId": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Next": "Is there a PersonIdentityItem for the sessionId",
      "TimeoutSeconds": 5,
      "ResultPath": "$.personIdentityItem"
    },
    "Is there a PersonIdentityItem for the sessionId": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.Item",
          "IsPresent": true,
          "Next": "Does PersonIdentityItem have a socialSecurityRecord with personalNumber present"
        }
      ],
      "Default": "Err: PersonIdentityItem not found"
    },
    "Err: PersonIdentityItem not found": {
      "Type": "Fail",
      "Error": "PersonIdentityItem not found"
    },
    "Does PersonIdentityItem have a socialSecurityRecord with personalNumber present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.personIdentityItem.Item.socialSecurityRecord.L[0].M.personalNumber.S",
          "IsPresent": true,
          "Next": "Get Unanswered question set"
        }
      ],
      "Default": "Err: NINO was not present in shared claims",
      "Comment": "Note this state use the raw dynamo pat. This is to avoid an expensive unmarshalling just for the the path."
    },
    "Err: NINO was not present in shared claims": {
      "Type": "Fail",
      "Error": "NINO was not present in shared claims"
    },
    "Get Unanswered question set": {
      "Type": "Task",
      "Next": "Check if we have any unanswered questions",
      "Parameters": {
        "TableName": "${QuestionsTableName}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "OutputPath": "$.Items[0].questions.L[?(@.M.answered.Bool==false)].M"
    },
    "Check if we have any unanswered questions": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$[0]",
          "IsPresent": true,
          "Next": "Iterate over questions"
        }
      ],
      "Default": "No More Questions"
    },
    "Iterate over questions": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Filter out dynamo artifacts",
        "States": {
          "Filter out dynamo artifacts": {
            "Type": "Pass",
            "Parameters": {
              "questionKey.$": "$.questionKey.S",
              "info.$": "$[?(@.info)].info.M",
              "order.$": "$.order.N",
              "answered.$": "$.answered.Bool",
              "infoCount.$": "States.ArrayLength($[?(@.info)].info.M)",
              "infoIsEmpty.$": "States.ArrayContains($[?(@.info)].info.M, '{}')"
            },
            "Next": "Choice"
          },
          "Choice": {
            "Type": "Choice",
            "Choices": [
              {
                "And": [
                  {
                    "Variable": "$.infoCount",
                    "NumericGreaterThan": 0
                  },
                  {
                    "Variable": "$.infoIsEmpty",
                    "BooleanEquals": false
                  }
                ],
                "Next": "Sanitise Info Array"
              }
            ],
            "Default": "Remove Info Object"
          },
          "Sanitise Info Array": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "questionKey.$": "$.questionKey",
              "info": {
                "currentTaxYear.$": "States.ArrayGetItem($[?(@.info[0].currentTaxYear)].info[0].currentTaxYear.S,0)",
                "previousTaxYear.$": "States.ArrayGetItem($[?(@.info[0].previousTaxYear)].info[0].previousTaxYear.S,0)"
              },
              "order.$": "$.order",
              "answered.$": "$.answered"
            }
          },
          "Remove Info Object": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "questionKey.$": "$.questionKey",
              "info": [],
              "order.$": "$.order",
              "answered.$": "$.answered"
            }
          }
        }
      },
      "Next": "Return Question",
      "MaxConcurrency": 1
    },
    "Return Question": {
      "Type": "Pass",
      "Next": "Success",
      "Parameters": {
        "questionKey.$": "$[0].questionKey",
        "info.$": "$[0].info",
        "getQuestionState": "Question"
      }
    },
    "No More Questions": {
      "Type": "Pass",
      "Next": "Success",
      "Result": {
        "getQuestionState": "NoMoreQuestions"
      }
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
